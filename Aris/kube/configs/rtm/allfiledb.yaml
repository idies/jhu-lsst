apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-29T22:28:16Z"
    generateName: app1-
    labels:
      MSSQL_CLUSTER: filedb
      app: app-reduce-abc-123
      plane: data
      role: application
    name: app1-h55np
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: app1
      uid: a4bf924d-42e6-11ea-a8b0-0cc47ad46d50
    resourceVersion: "145798432"
    selfLink: /api/v1/namespaces/filedb/pods/app1-h55np
    uid: a4c085e6-42e6-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: SERVICE_JSON
        value: eyJSdW50aW1lVHlwZSI6IlB5dGhvbiIsIkNvZGUiOiJvdXQgPSBoYW5kbGVyKG1zZz1tc2cpIiwiSW5pdENvZGUiOiJleGVjKG9wZW4oJy4vaGVsbG8ucHknKS5yZWFkKCkpIiwiT3duZXJzIjpbXSwiUmVhZGVycyI6W10sIklucHV0UGFyYW1ldGVyRGVmaW5pdGlvbnMiOlt7Ik5hbWUiOiJtc2ciLCJUeXBlIjoiY2hhcmFjdGVyIn1dLCJPdXRwdXRQYXJhbWV0ZXJEZWZpbml0aW9ucyI6W3siTmFtZSI6Im91dCIsIlR5cGUiOiJjaGFyYWN0ZXIifV0sIlByZWxvYWRlZEZpbGVzIjpbImhlbGxvLnB5Il19
      - name: APP_DOWNLOAD_URL
        value: https://nmnode-0-0.nmnode-0-svc:50470/webhdfs/v1/system/appdeploy/app-reduce-abc-123/app.zip?op=OPEN|
      - name: APP_SETUP_USERNAME
      - name: DedicatedShellPoolBasePath
        value: /var/opt/app
      - name: Pool__InitialSize
        value: "1"
      - name: Pool__MaxSize
        value: "1"
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_POD_TYPE
        value: app1
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_CONTAINER_TYPE
        value: mlserver
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      image: mcr.microsoft.com/mssql/bdc/mssql-mlserver-py-runtime:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mlserver
      ports:
      - containerPort: 12805
        name: http
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-jwt
        name: controller-jwt-signing-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: app1-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
        subPath: mlserver
      - mountPath: /var/log
        name: logs
        subPath: mlserver
      - mountPath: /var/run
        name: var-run
        subPath: mlserver
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-app.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: app1
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/opt
        name: data
        subPath: fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/certificates/agent
        name: app1-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb12
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: controller-jwt-signing-secret
      secret:
        defaultMode: 420
        secretName: controller-token-secret
    - name: app1-agent-secret
      secret:
        defaultMode: 420
        secretName: app1-agent-secret
    - emptyDir:
        sizeLimit: "0"
      name: data
    - emptyDir:
        sizeLimit: "0"
      name: logs
    - emptyDir:
        medium: Memory
        sizeLimit: "0"
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-29T22:28:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-29T22:28:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-29T22:28:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-29T22:28:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5c294c971910d7aebba014b20decaa9c900df976078f9ea83101f8ede11dd576
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-29T22:28:25Z"
    - containerID: docker://c75906886903d6c65543d153fcf00be8436de24f8c8af6b1a6ac7623449f6560
      image: mcr.microsoft.com/mssql/bdc/mssql-mlserver-py-runtime:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-mlserver-py-runtime@sha256:682dcdb8fbdb81c78d024548a35135004f49471c28b5b4b7119558ce9140b5b9
      lastState: {}
      name: mlserver
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-29T22:28:24Z"
    hostIP: 172.23.25.62
    phase: Running
    podIP: 172.24.77.173
    qosClass: Burstable
    startTime: "2020-01-29T22:28:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-02-17T12:59:16Z"
    generateName: appproxy-
    labels:
      MSSQL_CLUSTER: filedb
      app: appproxy
      plane: data
      role: proxy
      version: aQenK-28-bOPNr4OYGOSYhD8RLrh5EeT-RdegpaBUayga
    name: appproxy-gjqz7
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: appproxy
      uid: 1c9eaaef-3e05-11ea-a8b0-0cc47ad46d50
    resourceVersion: "143353375"
    selfLink: /api/v1/namespaces/filedb/pods/appproxy-gjqz7
    uid: 4dd9059c-5185-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: appproxy
      - name: MSSQL_CONTAINER_TYPE
        value: app-service-proxy
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      image: mcr.microsoft.com/mssql/bdc/mssql-app-service-proxy:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: app-service-proxy
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run
        name: var-run
        subPath: app-service-proxy
      - mountPath: /var/run/secrets/credentials/app-service-proxy
        name: app-service-proxy-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-jwt
        name: controller-jwt-signing-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
        subPath: app-service-proxy
      - mountPath: /var/log
        name: logs
        subPath: app-service-proxy
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/certificates/agent
        name: appproxy-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-app-service-proxy.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: appproxy
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/app-service-proxy
        name: app-service-proxy-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/certificates/agent
        name: appproxy-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb01
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: app-service-proxy-secret
      secret:
        defaultMode: 420
        secretName: appproxy-secret
    - name: controller-jwt-signing-secret
      secret:
        defaultMode: 420
        secretName: controller-token-secret
    - emptyDir: {}
      name: data
    - emptyDir:
        medium: Memory
      name: var-run
    - emptyDir: {}
      name: logs
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: appproxy-agent-secret
      secret:
        defaultMode: 420
        secretName: appproxy-agent-secret
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T13:12:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T13:12:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://702b9b8de89aa8bb267ce9decff476fde312dc41282f8cbdde28f54b3e8351e3
      image: mcr.microsoft.com/mssql/bdc/mssql-app-service-proxy:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-app-service-proxy@sha256:eed8f5b99d48010331ca4caa0feefd3adef9b4c07fdebc0244d297cf48e49c1d
      lastState: {}
      name: app-service-proxy
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:21Z"
    - containerID: docker://a8d975a6f17275124185e879dbfd695465191d63b07330ec61c47f8bc6e7a0da
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:22Z"
    hostIP: 172.23.25.51
    phase: Running
    podIP: 172.24.39.41
    qosClass: Burstable
    startTime: "2020-02-17T12:59:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-02-17T12:59:16Z"
    generateName: compute-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: compute-0
      controller-revision-hash: compute-0-674bbcdf8b
      plane: data
      pool-name: default
      pool-number: "0"
      role: compute-pool
      statefulset.kubernetes.io/pod-name: compute-0-0
    name: compute-0-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: compute-0
      uid: 1b8ddaa5-3e05-11ea-a8b0-0cc47ad46d50
    resourceVersion: "145798447"
    selfLink: /api/v1/namespaces/filedb/pods/compute-0-0
    uid: 4ddd52d7-5185-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - compute-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: compute
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      - containerPort: 5502
        name: shuffle-5502
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-compute-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: compute-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
        subPath: mssql-server
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: compute
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: compute-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-compute-pool-default.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: compute
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-compute-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: compute-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: compute-0-0
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb12
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: compute-0-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: logs
      persistentVolumeClaim:
        claimName: logs-compute-0-0
    - name: data
      persistentVolumeClaim:
        claimName: data-compute-0-0
    - name: mssql-compute-pool-default-secret
      secret:
        defaultMode: 420
        secretName: mssql-compute-pool-default-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: compute-0-agent-secret
      secret:
        defaultMode: 420
        secretName: compute-0-agent-secret
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - configMap:
        defaultMode: 420
        name: mssql-hadoop-storage-0-configmap
      name: hadoop-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T13:13:03Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T13:13:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://516ccb6a0448c17290dea645455b1f6b228e681ef972392d28be0d4d7b1c3f44
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:40Z"
    - containerID: docker://a7589c0e9349e06bb94312472236ec5ede93105279b9521ea33ef63429d105c4
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:41Z"
    - containerID: docker://1c839889aae3270f837e161c5b47a2658802990c4c2d7d8a471cf61603e5ca81
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:38Z"
    hostIP: 172.23.25.62
    phase: Running
    podIP: 172.24.77.179
    qosClass: Burstable
    startTime: "2020-02-17T12:59:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      microsoft.com/ignore-pod-health: "true"
    creationTimestamp: "2020-02-17T12:59:16Z"
    generateName: control-
    labels:
      app: controller
      plane: control
      role: controller
    name: control-fqlnt
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: control
      uid: 6f69d404-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "155424920"
    selfLink: /api/v1/namespaces/filedb/pods/control-fqlnt
    uid: 4dd88fda-5185-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: ACCEPT_EULA
        value: "yes"
      - name: CONTROLLER_ENABLE_TDS_PROXY
        value: "false"
      - name: CONTROLLER_ENABLE_HEALTH_PROPERTY_FSM
        value: "true"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: control
      - name: MSSQL_CONTAINER_TYPE
        value: controller
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      image: mcr.microsoft.com/mssql/bdc/mssql-controller:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: controller
      ports:
      - containerPort: 443
        name: controller-port
        protocol: TCP
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/opt
        name: data
        subPath: controller
      - mountPath: /var/log
        name: logs
        subPath: controller
      - mountPath: /var/run
        name: var-run
        subPath: controller
      - mountPath: /var/run/secrets/credentials/controller-login
        name: controller-login-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/knox
        name: controller-knox-secret
        readOnly: true
      - mountPath: /var/opt/controller/config
        name: controller-config-volume
      - mountPath: /var/run/secrets/credentials/node-admin-login
        name: node-admin-login-secret
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: sa-mssql-controller-token-s7wk8
        readOnly: true
    - env:
      - name: MSSQL_POD_TYPE
        value: control
      - name: MSSQL_CONTAINER_TYPE
        value: security-support
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8301"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8401"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-security-support:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: security-support
      ports:
      - containerPort: 8301
        name: agent-grpc-8301
        protocol: TCP
      - containerPort: 8401
        name: agent-srv-8401
        protocol: TCP
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: logs
        subPath: security-support
      - mountPath: /var/run
        name: var-run
        subPath: security-support
      - mountPath: /var/run/secrets/credentials/domain-service-account
        name: domain-service-account-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: control-agent-secret
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: sa-mssql-controller-token-s7wk8
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-controller.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: control
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/opt
        name: data
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: control-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: sa-mssql-controller-token-s7wk8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb12
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: sa-mssql-controller
    serviceAccountName: sa-mssql-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: logs
      persistentVolumeClaim:
        claimName: logs-controller
    - name: data
      persistentVolumeClaim:
        claimName: data-controller
    - emptyDir:
        medium: Memory
      name: var-run
    - name: domain-service-account-secret
      secret:
        defaultMode: 420
        secretName: domain-service-account-secret
    - name: controller-login-secret
      secret:
        defaultMode: 420
        secretName: controller-login-secret
    - name: controller-knox-secret
      secret:
        defaultMode: 420
        secretName: controller-knox-secret
    - name: node-admin-login-secret
      secret:
        defaultMode: 420
        secretName: node-admin-login-secret
    - configMap:
        defaultMode: 420
        name: mssql-controller-config
      name: controller-config-volume
    - name: control-agent-secret
      secret:
        defaultMode: 420
        secretName: control-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: sa-mssql-controller-token-s7wk8
      secret:
        defaultMode: 420
        secretName: sa-mssql-controller-token-s7wk8
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-03-30T01:26:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-03-30T01:26:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5370815a7cd9c7d1332a73fbb238a50094a19b84c5c43b31bed70105e7add277
      image: mcr.microsoft.com/mssql/bdc/mssql-controller:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-controller@sha256:08fa22e4032262eb927c09386ce0de4f08e9574bd00d85d75fc8eddb70664e48
      lastState:
        terminated:
          containerID: docker://1145cac91a78c35964f89bfe993e7c41e9a3e05b1a48ea79b5c919b0287d2dd9
          exitCode: 0
          finishedAt: "2020-03-30T01:26:36Z"
          reason: Completed
          startedAt: "2020-03-04T00:19:58Z"
      name: controller
      ready: true
      restartCount: 9
      state:
        running:
          startedAt: "2020-03-30T01:26:37Z"
    - containerID: docker://0102f262f85366a90c4e0396cc363c86bdceb87da267797237e2530950ade515
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:41Z"
    - containerID: docker://0d553ab6d05456f66f2a9014206941d641f0e5670037e83ae357cc616e609d22
      image: mcr.microsoft.com/mssql/bdc/mssql-security-support:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-security-support@sha256:52734532470bc49cd0afcd2b47dba9e0b06459d949f7cd89b7baba9d8a8eb448
      lastState: {}
      name: security-support
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:40Z"
    hostIP: 172.23.25.62
    phase: Running
    podIP: 172.24.77.177
    qosClass: Burstable
    startTime: "2020-02-17T12:59:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      microsoft.com/ignore-pod-health: "true"
    creationTimestamp: "2020-01-23T17:18:55Z"
    generateName: controldb-
    labels:
      app: controldb
      controller-revision-hash: controldb-cf6668d4
      plane: control
      role: controldb
      statefulset.kubernetes.io/pod-name: controldb-0
    name: controldb-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: controldb
      uid: 6f61c84b-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136129441"
    selfLink: /api/v1/namespaces/filedb/pods/controldb-0
    uid: 6f630fb2-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_POD_TYPE
        value: controldb
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8301"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8401"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-server-controller:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 1433
        name: ctrl-sql-port
        protocol: TCP
      - containerPort: 8301
        name: agent-grpc-8301
        protocol: TCP
      - containerPort: 8401
        name: agent-srv-8401
        protocol: TCP
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/opt/mssql/data
        name: data
        subPath: mssql-server
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/opt/mssql/log
        name: logs
        subPath: mssql-server/mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/secrets/credentials/mssql-sa-password
        name: controller-sa-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: controldb-agent-secret
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-controllerdb.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: controldb
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/opt
        name: data
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: controldb-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: controldb-0
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb08
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: logs
      persistentVolumeClaim:
        claimName: logs-controldb
    - name: data
      persistentVolumeClaim:
        claimName: data-controldb
    - emptyDir:
        medium: Memory
      name: var-run
    - name: controller-sa-secret
      secret:
        defaultMode: 420
        secretName: controller-sa-secret
    - name: controller-login-secret
      secret:
        defaultMode: 420
        secretName: controller-login-secret
    - name: controldb-agent-secret
      secret:
        defaultMode: 420
        secretName: controldb-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:18:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:01Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:01Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:18:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e47867b22cd10b2cb2ef07052cbc7e7c7b3d34c6d84be6593608ba801be4431a
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:20:00Z"
    - containerID: docker://6d54aa9ca92f9d0f3ffbca770f0dcaef2823fba6096a273a5ec1b2dbcad21949
      image: mcr.microsoft.com/mssql/bdc/mssql-server-controller:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-controller@sha256:de93aa62c6b73f6f7850242b12b6fc2328a47bcd36a35190683036459fb8e86a
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:19:34Z"
    hostIP: 172.23.25.58
    phase: Running
    podIP: 172.24.59.79
    qosClass: Burstable
    startTime: "2020-01-23T17:18:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      microsoft.com/ignore-pod-health: "true"
    creationTimestamp: "2020-01-23T17:20:30Z"
    generateName: controlwd-
    labels:
      MSSQL_CLUSTER: filedb
      app: controlwd
      plane: control
      role: controlwd
      version: aA5irtJW_WtjRowhTbfI7YHf2FINYS0oufS71YGIwQQoa
    name: controlwd-dn65d
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: controlwd
      uid: a79d8673-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130170"
    selfLink: /api/v1/namespaces/filedb/pods/controlwd-dn65d
    uid: a79e2f82-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: controlwd
      - name: MSSQL_CONTAINER_TYPE
        value: controlwatchdog
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      image: mcr.microsoft.com/mssql/bdc/mssql-control-watchdog:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: controlwatchdog
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/opt
        name: data
        subPath: controlwatchdog
      - mountPath: /var/log
        name: logs
        subPath: controlwatchdog
      - mountPath: /var/run
        name: var-run
        subPath: controlwatchdog
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: sa-mssql-controller-token-s7wk8
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb01
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: sa-mssql-controller
    serviceAccountName: sa-mssql-controller
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: data
    - emptyDir: {}
      name: logs
    - emptyDir:
        medium: Memory
      name: var-run
    - name: sa-mssql-controller-token-s7wk8
      secret:
        defaultMode: 420
        secretName: sa-mssql-controller-token-s7wk8
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://48ac68e1fb1f7b2388253efd02ae6847dc1c97eaac1f876f03789d65adb4ec88
      image: mcr.microsoft.com/mssql/bdc/mssql-control-watchdog:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-control-watchdog@sha256:a91668df20a600be03e966530f81d1d53beaae5fb952a5ed5311ae7a61dfc3d5
      lastState: {}
      name: controlwatchdog
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:30Z"
    hostIP: 172.23.25.51
    phase: Running
    podIP: 172.24.39.27
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T20:12:11Z"
    generateName: data-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: data-0
      controller-revision-hash: data-0-848c6dffc6
      plane: data
      pool-name: default
      pool-number: "0"
      role: data-pool
      statefulset.kubernetes.io/pod-name: data-0-0
    name: data-0-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: data-0
      uid: a3e82a15-3e1c-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136167484"
    selfLink: /api/v1/namespaces/filedb/pods/data-0-0
    uid: a3eaeec0-3e1c-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - data-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_RPC_PORT
        value: "135"
      - name: MSSQL_DTC_TCP_PORT
        value: "51000"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 135
        name: rpc-port-135
        protocol: TCP
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      - containerPort: 51000
        name: dtc-port-51000
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-data-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/mssql-server
      - mountPath: /var/opt/stripe-shared
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/stripe-shared
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/collectd
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENT_INFLUXDB_HOST
        value: metricsdb-svc
      - name: FLUENT_INFLUXDB_PORT
        value: "8086"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-data-pool-default.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-data-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: data-0-0
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb10
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: data-0-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-data-0-0
    - name: logs
      persistentVolumeClaim:
        claimName: logs-data-0-0
    - name: mssql-data-pool-default-secret
      secret:
        defaultMode: 420
        secretName: mssql-data-pool-default-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: data-0-agent-secret
      secret:
        defaultMode: 420
        secretName: data-0-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - hostPath:
        path: /sciserver
        type: ""
      name: autofs-sciserver
    - hostPath:
        path: /srv
        type: ""
      name: srv
    - hostPath:
        path: /nvme
        type: ""
      name: nvme
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:12:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:16:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:16:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:12:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a2b0fafed4d90572cf8f4402d2fb2eef35e3b603fa6346f099891a9e328f9738
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:15:07Z"
    - containerID: docker://fd822e955a9891a5b888bae22656d449d9e567e7b44e3ddd51ecafd3506b571c
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:15:08Z"
    - containerID: docker://4927919cfb6fff2675daaa3f2f2b86c329135a9b2a27a8fa9fb0cc44b115dca8
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:15:05Z"
    hostIP: 172.23.25.60
    phase: Running
    podIP: 172.24.75.250
    qosClass: Burstable
    startTime: "2020-01-23T20:12:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T20:12:11Z"
    generateName: data-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: data-0
      controller-revision-hash: data-0-848c6dffc6
      plane: data
      pool-name: default
      pool-number: "0"
      role: data-pool
      statefulset.kubernetes.io/pod-name: data-0-1
    name: data-0-1
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: data-0
      uid: a3e82a15-3e1c-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136167339"
    selfLink: /api/v1/namespaces/filedb/pods/data-0-1
    uid: a3ebabe2-3e1c-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - data-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_RPC_PORT
        value: "135"
      - name: MSSQL_DTC_TCP_PORT
        value: "51000"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 135
        name: rpc-port-135
        protocol: TCP
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      - containerPort: 51000
        name: dtc-port-51000
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-data-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/mssql-server
      - mountPath: /var/opt/stripe-shared
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/stripe-shared
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/collectd
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENT_INFLUXDB_HOST
        value: metricsdb-svc
      - name: FLUENT_INFLUXDB_PORT
        value: "8086"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-data-pool-default.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-data-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: data-0-1
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb11
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: data-0-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-data-0-1
    - name: logs
      persistentVolumeClaim:
        claimName: logs-data-0-1
    - name: mssql-data-pool-default-secret
      secret:
        defaultMode: 420
        secretName: mssql-data-pool-default-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: data-0-agent-secret
      secret:
        defaultMode: 420
        secretName: data-0-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - hostPath:
        path: /sciserver
        type: ""
      name: autofs-sciserver
    - hostPath:
        path: /srv
        type: ""
      name: srv
    - hostPath:
        path: /nvme
        type: ""
      name: nvme
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:12:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:15:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:15:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:12:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e7c810d530f9406f2060805f4bc5343ae165744f95653d59aee2adf3d94c8b07
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:13:25Z"
    - containerID: docker://c4c7ce4a1eaf92fe9f7fab7443b256a947fce12e3c6066deecef965fef6edafe
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:13:25Z"
    - containerID: docker://2787a7c8958790eda522563eb4460ea4d40173b0582d329e0022e9f83e28936b
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:13:24Z"
    hostIP: 172.23.25.61
    phase: Running
    podIP: 172.24.104.160
    qosClass: Burstable
    startTime: "2020-01-23T20:12:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T20:12:11Z"
    generateName: data-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: data-0
      controller-revision-hash: data-0-848c6dffc6
      plane: data
      pool-name: default
      pool-number: "0"
      role: data-pool
      statefulset.kubernetes.io/pod-name: data-0-2
    name: data-0-2
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: data-0
      uid: a3e82a15-3e1c-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136167362"
    selfLink: /api/v1/namespaces/filedb/pods/data-0-2
    uid: a3ec8370-3e1c-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - data-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_RPC_PORT
        value: "135"
      - name: MSSQL_DTC_TCP_PORT
        value: "51000"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 135
        name: rpc-port-135
        protocol: TCP
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      - containerPort: 51000
        name: dtc-port-51000
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-data-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/mssql-server
      - mountPath: /var/opt/stripe-shared
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/stripe-shared
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/collectd
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENT_INFLUXDB_HOST
        value: metricsdb-svc
      - name: FLUENT_INFLUXDB_PORT
        value: "8086"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-data-pool-default.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-data-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: data-0-2
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb01
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: data-0-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-data-0-2
    - name: logs
      persistentVolumeClaim:
        claimName: logs-data-0-2
    - name: mssql-data-pool-default-secret
      secret:
        defaultMode: 420
        secretName: mssql-data-pool-default-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: data-0-agent-secret
      secret:
        defaultMode: 420
        secretName: data-0-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - hostPath:
        path: /sciserver
        type: ""
      name: autofs-sciserver
    - hostPath:
        path: /srv
        type: ""
      name: srv
    - hostPath:
        path: /nvme
        type: ""
      name: nvme
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:12:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:15:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:15:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:12:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1788aee0fde46f9e2bff0e6cd1aa0cd74a64553ffa345fbf9b87652ca75d06de
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:12:21Z"
    - containerID: docker://7cf6c7ca692beac8612f685171320146198c497e1854bd9e67f4d4d8ad9571e7
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:12:22Z"
    - containerID: docker://e2d10a9343b91f17c8e5ff0f735c80fc2c744ad27901df79d92e9eda15e83016
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:12:20Z"
    hostIP: 172.23.25.51
    phase: Running
    podIP: 172.24.39.32
    qosClass: Burstable
    startTime: "2020-01-23T20:12:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T20:12:11Z"
    generateName: data-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: data-0
      controller-revision-hash: data-0-848c6dffc6
      plane: data
      pool-name: default
      pool-number: "0"
      role: data-pool
      statefulset.kubernetes.io/pod-name: data-0-3
    name: data-0-3
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: data-0
      uid: a3e82a15-3e1c-11ea-a8b0-0cc47ad46d50
    resourceVersion: "145798490"
    selfLink: /api/v1/namespaces/filedb/pods/data-0-3
    uid: a3edc31c-3e1c-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - data-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_RPC_PORT
        value: "135"
      - name: MSSQL_DTC_TCP_PORT
        value: "51000"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 135
        name: rpc-port-135
        protocol: TCP
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      - containerPort: 51000
        name: dtc-port-51000
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-data-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/mssql-server
      - mountPath: /var/opt/stripe-shared
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/stripe-shared
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/collectd
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENT_INFLUXDB_HOST
        value: metricsdb-svc
      - name: FLUENT_INFLUXDB_PORT
        value: "8086"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-data-pool-default.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: data
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-data-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: data-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-data-pool-default/var.cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: data-0-3
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb12
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: data-0-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-data-0-3
    - name: logs
      persistentVolumeClaim:
        claimName: logs-data-0-3
    - name: mssql-data-pool-default-secret
      secret:
        defaultMode: 420
        secretName: mssql-data-pool-default-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: data-0-agent-secret
      secret:
        defaultMode: 420
        secretName: data-0-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - hostPath:
        path: /sciserver
        type: ""
      name: autofs-sciserver
    - hostPath:
        path: /srv
        type: ""
      name: srv
    - hostPath:
        path: /nvme
        type: ""
      name: nvme
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:12:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:15:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:15:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T20:12:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e910a04fe104fbd5ccd9ef9ce49a3f321adff57ee7b1a2f84b07f5c1d54f80a0
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:13:25Z"
    - containerID: docker://c3ec89a0f6f0b1153b3122a545d9d1068ad1af2053169dc3eb8a3ebc7ad2c9ce
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:13:25Z"
    - containerID: docker://eaa40d59e3b9125d5505360e72e2b1f6132e026e6f01495ade3fd9c568c00912
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T20:13:24Z"
    hostIP: 172.23.25.62
    phase: Running
    podIP: 172.24.77.169
    qosClass: Burstable
    startTime: "2020-01-23T20:12:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-27T17:52:19Z"
    generateName: gateway-
    labels:
      MSSQL_CLUSTER: filedb
      app: gateway
      controller-revision-hash: gateway-7bf46f6bcd
      plane: control
      role: gateway
      statefulset.kubernetes.io/pod-name: gateway-0
    name: gateway-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: gateway
      uid: 1fea85a5-3e05-11ea-a8b0-0cc47ad46d50
    resourceVersion: "137301343"
    selfLink: /api/v1/namespaces/filedb/pods/gateway-0
    uid: c317978e-412d-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: gateway
      - name: MSSQL_CONTAINER_TYPE
        value: knox
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      image: mcr.microsoft.com/mssql/bdc/mssql-security-knox:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: knox
      ports:
      - containerPort: 8443
        name: knox-8443
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/gateway
        name: gateway-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
        subPath: knox
      - mountPath: /var/run
        name: var-run
        subPath: knox
      - mountPath: /var/run/secrets/certificates/agent
        name: gateway-agent-secret
        readOnly: true
      - mountPath: /var/log
        name: logs
        subPath: knox
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/knox
        name: knox-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-security.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: gateway
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/opt
        name: data
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/secrets/credentials/gateway
        name: gateway-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: gateway-agent-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: gateway-0
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb11
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: gateway-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: data-gateway-0
    - name: logs
      persistentVolumeClaim:
        claimName: logs-gateway-0
    - name: gateway-agent-secret
      secret:
        defaultMode: 420
        secretName: gateway-agent-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: gateway-secret
      secret:
        defaultMode: 420
        secretName: gateway-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - configMap:
        defaultMode: 420
        name: knox-configmap
      name: knox-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T17:52:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T17:52:29Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T17:52:29Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T17:52:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://65b0f3d3a8a0bca7471b02efdcde1f88a3891d4b1bb0e5b7652c9f65f2995dfa
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-27T17:52:28Z"
    - containerID: docker://5a3886d8c3a8f7900aba369c3bcf883e77b53ed216693253bbd1a35e1feff549
      image: mcr.microsoft.com/mssql/bdc/mssql-security-knox:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-security-knox@sha256:a91968d85018683a83150e3bca81f58358dc72cfd3866df693806d7402e0d9dc
      lastState: {}
      name: knox
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-27T17:52:28Z"
    hostIP: 172.23.25.61
    phase: Running
    podIP: 172.24.104.164
    qosClass: Burstable
    startTime: "2020-01-27T17:52:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:37Z"
    generateName: logsdb-
    labels:
      MSSQL_CLUSTER: filedb
      app: logsdb
      controller-revision-hash: logsdb-595f9c8dc7
      plane: control
      role: monitoring
      statefulset.kubernetes.io/pod-name: logsdb-0
    name: logsdb-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: logsdb
      uid: abb8c54d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "158113352"
    selfLink: /api/v1/namespaces/filedb/pods/logsdb-0
    uid: abbad58c-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: ES_JAVA_OPTS
        value: -Xms512m -Xmx512m
      - name: MSSQL_POD_TYPE
        value: logsdb
      - name: MSSQL_CONTAINER_TYPE
        value: elasticsearch
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-elasticsearch:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: elasticsearch
      ports:
      - containerPort: 9200
        name: es-http
        protocol: TCP
      - containerPort: 9300
        name: es-transport
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources:
        limits:
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/logsdb-admin-secret
        name: logsdb-admin-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: logsdb-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
        subPath: elasticsearch
      - mountPath: /var/log
        name: logs
        subPath: elasticsearch
      - mountPath: /var/run
        name: var-run
        subPath: elasticsearch
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: logsdb-0
    imagePullSecrets:
    - name: mssql-private-registry
    initContainers:
    - command:
      - sysctl
      - -w
      - vm.max_map_count=262144
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-elasticsearch:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: init-sysctl
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    nodeName: filedb06
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: logsdb-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: logs
      persistentVolumeClaim:
        claimName: logs-logsdb-0
    - name: data
      persistentVolumeClaim:
        claimName: data-logsdb-0
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: logsdb-agent-secret
      secret:
        defaultMode: 420
        secretName: logsdb-agent-secret
    - name: logsdb-admin-secret
      secret:
        defaultMode: 420
        secretName: logsdb-admin-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - emptyDir:
        medium: Memory
      name: var-run
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:22:05Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-04-08T07:20:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-04-08T07:20:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b7f00c9090364d602add5fe28fe2998bb548252a6fbf7f42ed9c9fd9a1021155
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-elasticsearch:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-elasticsearch@sha256:2c51488fcd737169e059774cae77127f433fb1054f0f85cd50d06f0b99f58bef
      lastState:
        terminated:
          containerID: docker://84f1a13ea4a30363abe102e2aea8622cfad374fa9dcdfa8288d7d160c304955f
          exitCode: 1
          finishedAt: "2020-04-08T07:20:24Z"
          reason: OOMKilled
          startedAt: "2020-03-30T13:23:08Z"
      name: elasticsearch
      ready: true
      restartCount: 8
      state:
        running:
          startedAt: "2020-04-08T07:20:25Z"
    hostIP: 172.23.25.56
    initContainerStatuses:
    - containerID: docker://8e02531c6f0f7a599a507f8d3adeef4247b86cc15e707faa6170c89d71a6b9ce
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-elasticsearch:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-elasticsearch@sha256:2c51488fcd737169e059774cae77127f433fb1054f0f85cd50d06f0b99f58bef
      lastState: {}
      name: init-sysctl
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://8e02531c6f0f7a599a507f8d3adeef4247b86cc15e707faa6170c89d71a6b9ce
          exitCode: 0
          finishedAt: "2020-01-23T17:22:05Z"
          reason: Completed
          startedAt: "2020-01-23T17:22:05Z"
    phase: Running
    podIP: 172.24.1.70
    qosClass: Burstable
    startTime: "2020-01-23T17:20:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:34Z"
    generateName: logsui-
    labels:
      MSSQL_CLUSTER: filedb
      app: logsui
      plane: control
      role: monitoring
      version: aJt8YhLYT0WAFrB8AuaQSUUAtmDXCjqyDRfFVLdHCvmwa
    name: logsui-rvr88
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: logsui
      uid: aa7e22f1-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130294"
    selfLink: /api/v1/namespaces/filedb/pods/logsui-rvr88
    uid: aa7ea535-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: CLUSTER_NAME
        value: elasticsearch
      - name: ELASTICSEARCH_HOSTS
        value: https://logsdb-svc:9200
      - name: MSSQL_POD_TYPE
        value: logsui
      - name: MSSQL_CONTAINER_TYPE
        value: kibana
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-kibana:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: kibana
      ports:
      - containerPort: 5601
        name: kibana-5601
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run
        name: var-run
        subPath: kibana
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: logsui-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/logsdb-admin-secret
        name: logsdb-admin-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb11
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: var-run
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: logsui-agent-secret
      secret:
        defaultMode: 420
        secretName: logsui-agent-secret
    - name: logsdb-admin-secret
      secret:
        defaultMode: 420
        secretName: logsdb-admin-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:34Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:34Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://857a319e3146991b0297f6126bdc087b836323affaa04d7ccb5bef23914d2eca
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-kibana:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-kibana@sha256:eef0952971fbfb32941ae8ad5794d9fc4fdcf5ac3e6e2001dc9c4a90b8c9eced
      lastState: {}
      name: kibana
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:48Z"
    hostIP: 172.23.25.61
    phase: Running
    podIP: 172.24.104.158
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:34Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-27T22:54:52Z"
    generateName: master-
    labels:
      MSSQL_CLUSTER: filedb
      app: master
      controller-revision-hash: master-8544fcfcdd
      mssql.microsoft.com/sql-instance: master
      plane: data
      role: master-pool
      statefulset.kubernetes.io/pod-name: master-0
      type: sqlservr
    name: master-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: master
      uid: 07983705-4158-11ea-a8b0-0cc47ad46d50
    resourceVersion: "137362805"
    selfLink: /api/v1/namespaces/filedb/pods/master-0
    uid: 079a556f-4158-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: master
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8301"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8401"
      - name: ACCEPT_EULA
        value: "Y"
      - name: ACCEPT_EULA_ML
        value: "Y"
      - name: MSSQL_RPC_PORT
        value: "135"
      - name: MSSQL_DTC_TCP_PORT
        value: "51000"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 135
        name: rpc-port-135
        protocol: TCP
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8301
        name: agent-grpc-8301
        protocol: TCP
      - containerPort: 8401
        name: agent-srv-8401
        protocol: TCP
      - containerPort: 51000
        name: dtc-port-51000
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-master-pool-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/node-admin-login
        name: node-admin-login-secrets
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: master-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/master-0/cu1/mssql-server
      - mountPath: /var/opt/mssql/data2
        name: idies-data2
        subPath: Aris/master-0/cu1/mssql-server/data2
      - mountPath: /var/opt/mssql/data3
        name: idies-data3
        subPath: Aris/master-0/cu1/mssql-server/data3
      - mountPath: /var/opt/mssql/data4
        name: idies-data4
        subPath: Aris/master-0/cu1/mssql-server/data4
      - mountPath: /var/opt/mssql/data5
        name: idies-data5
        subPath: Aris/master-0/cu1/mssql-server/data5
      - mountPath: /var/opt/mssql/data6
        name: idies-data6
        subPath: Aris/master-0/cu1/mssql-server/data6
      - mountPath: /var/opt/mssql/data7
        name: idies-data7
        subPath: Aris/master-0/cu1/mssql-server/data7
      - mountPath: /var/opt/mssql/data8
        name: idies-data8
        subPath: Aris/master-0/cu1/mssql-server/data8
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MSSQL_POD_TYPE
        value: master
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: master
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: master-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/master-0/cu1/collectd
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-master-pool.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: master
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-master-pool-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: master-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/master-0/cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: master-0
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb14
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: master-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: idies-data3
      persistentVolumeClaim:
        claimName: idies-data3-master-0
    - name: idies-data4
      persistentVolumeClaim:
        claimName: idies-data4-master-0
    - name: idies-data6
      persistentVolumeClaim:
        claimName: idies-data6-master-0
    - name: idies-data7
      persistentVolumeClaim:
        claimName: idies-data7-master-0
    - name: idies-data8
      persistentVolumeClaim:
        claimName: idies-data8-master-0
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-master-0
    - name: idies-data2
      persistentVolumeClaim:
        claimName: idies-data2-master-0
    - name: idies-data5
      persistentVolumeClaim:
        claimName: idies-data5-master-0
    - name: logs
      persistentVolumeClaim:
        claimName: logs-master-0
    - name: mssql-master-pool-secret
      secret:
        defaultMode: 420
        secretName: mssql-master-pool-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: node-admin-login-secrets
      secret:
        defaultMode: 420
        secretName: node-admin-login-secret
    - name: master-agent-secret
      secret:
        defaultMode: 420
        secretName: master-agent-secret
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - configMap:
        defaultMode: 420
        name: mssql-hadoop-storage-0-configmap
      name: hadoop-config-volume
    - hostPath:
        path: /sciserver
        type: ""
      name: autofs-sciserver
    - hostPath:
        path: /srv
        type: ""
      name: srv
    - hostPath:
        path: /nvme
        type: ""
      name: nvme
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T22:54:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T22:56:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T22:56:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T22:54:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6f930317f3c339af0af26579dc92b3be998f52d6edca4b6afd089539575909e6
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-27T22:55:00Z"
    - containerID: docker://f6b808a2dd839c0af5472dd3fe119c8d8fbf510bf8da70019837bd25ab9a9ade
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-27T22:55:00Z"
    - containerID: docker://77082370762a9b5b7d9919cca8124360428e5e1b08484bde5d3a297fada26a41
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-27T22:54:59Z"
    hostIP: 172.23.25.64
    phase: Running
    podIP: 172.24.98.156
    qosClass: Burstable
    startTime: "2020-01-27T22:54:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:35Z"
    generateName: metricsdb-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdb
      controller-revision-hash: metricsdb-585dcdb8cc
      plane: control
      role: monitoring
      statefulset.kubernetes.io/pod-name: metricsdb-0
    name: metricsdb-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: metricsdb
      uid: aa8e4a04-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130248"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdb-0
    uid: aa904bab-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: metricsdb
      - name: MSSQL_CONTAINER_TYPE
        value: influxdb
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-influxdb:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: influxdb
      ports:
      - containerPort: 8086
        name: influxdb-8086
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdb-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
        subPath: influxdb
      - mountPath: /var/log
        name: logs
        subPath: influxdb
      - mountPath: /var/run
        name: var-run
        subPath: influxdb
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: metricsdb-0
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb01
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: metricsdb-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: logs
      persistentVolumeClaim:
        claimName: logs-metricsdb-0
    - name: data
      persistentVolumeClaim:
        claimName: data-metricsdb-0
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: metricsdb-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:44Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://90a05fa8b22b6414f5011717d8bec381b05bbc749853a2928783bb11b9ceba7e
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-influxdb:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-influxdb@sha256:f3c8c41b89b1a755b5cfb8622a34e28963082fab67d1c0cb98fa36bfca267ab2
      lastState: {}
      name: influxdb
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:38Z"
    hostIP: 172.23.25.51
    phase: Running
    podIP: 172.24.39.29
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-4k9rd
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "145798474"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-4k9rd
    uid: a8609ab1-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb12
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb12
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5288c280c6da4a07cadc2cf31a091e1e39834fbb7bb5166078ffb32897ef0a60
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:33Z"
    hostIP: 172.23.25.62
    phase: Running
    podIP: 172.24.77.167
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-827l7
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130203"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-827l7
    uid: a860a523-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb15
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb15
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://33b0f2ee836e4e29b350d76c4fbf02ef9b2c3e464e000d985d869a840139a591
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:32Z"
    hostIP: 172.23.25.65
    phase: Running
    podIP: 172.24.29.198
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-96mv5
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130270"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-96mv5
    uid: a8618f7c-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb06
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb06
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c2282e166d301237428224444cdea792d739c53d8319052401273d5790ca2008
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:42Z"
    hostIP: 172.23.25.56
    phase: Running
    podIP: 172.24.1.69
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:26:09Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-9rn95
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136132070"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-9rn95
    uid: 71f5a34f-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb08
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb08
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:26:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:26:11Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:26:11Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:26:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2eddd344bf3ffa6e87881bfa4f4d1bbe14abd92be8ac6095bdd85103f9a225d7
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:26:11Z"
    hostIP: 172.23.25.58
    phase: Running
    podIP: 172.24.59.80
    qosClass: BestEffort
    startTime: "2020-01-23T17:26:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-fb4kr
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130237"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-fb4kr
    uid: a8618453-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb10
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb10
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1c94b03838c119663209b33d209a1df42c92c4128dff39883ccc4a6f7ce01966
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:37Z"
    hostIP: 172.23.25.60
    phase: Running
    podIP: 172.24.75.249
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-gwj6m
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130184"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-gwj6m
    uid: a85f52fd-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb11
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb11
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://fe3a9329fe71a3548d4a3857f0fe76665ba66c95fcb3a25fd23ae5144f9a43cd
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:31Z"
    hostIP: 172.23.25.61
    phase: Running
    podIP: 172.24.104.157
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-hkzlp
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130221"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-hkzlp
    uid: a8618c86-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb01
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb01
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://7b3ccb17e7d3f81b62eb9562bd6e0d5582479fde4302be3b903613f98aca31e0
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:34Z"
    hostIP: 172.23.25.51
    phase: Running
    podIP: 172.24.39.28
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-pjrtc
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130173"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-pjrtc
    uid: a86190f4-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb09
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb09
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a571f7d1e8153fbe28f969e19e6d6556b81d428f1ba1e4d945732ffa5fff3e22
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:30Z"
    hostIP: 172.23.25.59
    phase: Running
    podIP: 172.24.33.62
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-pl52h
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "143352471"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-pl52h
    uid: a8617fd6-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb07
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb07
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ab7f1f5244b526b1d44fcb9dc24001958d1b7696dcfdca1f1c11d1383d1be6e6
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:20:34Z"
    hostIP: 172.23.25.57
    phase: Running
    podIP: 172.24.46.11
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-qjrbc
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130130"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-qjrbc
    uid: a8618cc6-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb03
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb03
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://690389a950734d6290749a90c7ce38ad5895890a5c92124963eb12393a4937de
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:25Z"
    hostIP: 172.23.25.53
    phase: Running
    podIP: 172.24.20.112
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-r29nd
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130150"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-r29nd
    uid: a860e9d6-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb04
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb04
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:29Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:29Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e35e3cad481c49db2f265e40921b2c750579f10f4e8876ceaf7f74ce62955d91
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:28Z"
    hostIP: 172.23.25.54
    phase: Running
    podIP: 172.24.38.83
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-r2x6f
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130205"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-r2x6f
    uid: a8619665-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb05
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb05
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2bd26b2e285f739badf9e4bbca246b95d238d971e490d9f6a22407fce3a1a40c
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:33Z"
    hostIP: 172.23.25.55
    phase: Running
    podIP: 172.24.56.10
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-r9lvr
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136130214"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-r9lvr
    uid: a85f9bb5-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb14
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb14
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:21:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1d50f961fffc1a829d7f1e11e20c8fb7cb5a2dcf0f11de11dcca576c3a002c22
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState: {}
      name: telegraf
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T17:21:33Z"
    hostIP: 172.23.25.64
    phase: Running
    podIP: 172.24.98.150
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T17:20:31Z"
    generateName: metricsdc-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdc
      controller-revision-hash: b569c8d68
      plane: control
      pod-template-generation: "1"
      role: monitoring
      version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
    name: metricsdc-x9l82
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricsdc
      uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "141658592"
    selfLink: /api/v1/namespaces/filedb/pods/metricsdc-x9l82
    uid: a86098b9-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - filedb02
    containers:
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: HOST_MOUNT_PREFIX
        value: /rootfs
      - name: HOST_PROC
        value: /rootfs/proc
      - name: HOST_SYS
        value: /rootfs/sys
      - name: HOST_ETC
        value: /rootfs/etc
      - name: MSSQL_POD_TYPE
        value: metricsdc
      - name: MSSQL_CONTAINER_TYPE
        value: telegraf
      - name: MSSQL_POD_KIND
        value: DaemonSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: telegraf
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsdc-agent-secret
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: telegraf
      - mountPath: /var/run/docker.sock
        name: docker-socket
        readOnly: true
      - mountPath: /rootfs
        name: rootro
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb02
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - hostPath:
        path: /
        type: ""
      name: rootro
    - emptyDir:
        medium: Memory
      name: var-run
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - name: metricsdc-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsdc-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-02-11T17:28:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-02-11T17:28:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T17:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f3f662753e781c4dbef04548535ce2919ca61fddfb5e228f792e0bfbfb2ab720
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf@sha256:3431ac3b84f99c020d6e13cd44c700bf1f77273ff0034d56342892447d715406
      lastState:
        terminated:
          containerID: docker://cdd7fdb9c471354328b813814d8032612affbc40a2f59280234829aa995a9381
          exitCode: 255
          finishedAt: "2020-02-11T17:28:13Z"
          reason: Error
          startedAt: "2020-01-23T17:21:27Z"
      name: telegraf
      ready: true
      restartCount: 1
      state:
        running:
          startedAt: "2020-02-11T17:28:31Z"
    hostIP: 172.23.25.52
    phase: Running
    podIP: 172.24.103.17
    qosClass: BestEffort
    startTime: "2020-01-23T17:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-02-17T12:59:16Z"
    generateName: metricsui-
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsui
      plane: control
      role: monitoring
      version: aWnNpJtL3JSE5blLtIBdOe7i6gbfMHwyJd1xwajvf1Psa
    name: metricsui-j284t
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metricsui
      uid: aa7eea0e-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "143350477"
    selfLink: /api/v1/namespaces/filedb/pods/metricsui-j284t
    uid: 4dd8966b-5185-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: MSSQL_POD_TYPE
        value: metricsui
      - name: MSSQL_CONTAINER_TYPE
        value: grafana
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-grafana:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: grafana
      ports:
      - containerPort: 3000
        name: grafana-3000
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/certificates/agent
        name: metricsui-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsui-admin-secret
        name: metricsui-admin-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-ro-secret
        name: metricsdb-ro-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
        subPath: grafana
      - mountPath: /var/log
        name: logs
        subPath: grafana
      - mountPath: /var/run
        name: var-run
        subPath: grafana
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb08
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: data
    - emptyDir: {}
      name: logs
    - emptyDir:
        medium: Memory
      name: var-run
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: metricsui-agent-secret
      secret:
        defaultMode: 420
        secretName: metricsui-agent-secret
    - name: metricsdb-ro-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-ro-secret
    - name: metricsui-admin-secret
      secret:
        defaultMode: 420
        secretName: metricsui-admin-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ac44634f1c3cf12f93fb9509886062aac0c631f84ce9fe4a53cbe1f6151ce6dd
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-grafana:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-grafana@sha256:c9686fae0007fdaf6bab0c98be372f1523395de8e6e4e9003f6368e546da7b82
      lastState: {}
      name: grafana
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:27Z"
    hostIP: 172.23.25.58
    phase: Running
    podIP: 172.24.59.82
    qosClass: BestEffort
    startTime: "2020-02-17T12:59:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-02-17T12:59:16Z"
    generateName: mgmtproxy-
    labels:
      MSSQL_CLUSTER: filedb
      app: mgmtproxy
      plane: control
      role: proxy
      version: anVq9SEXC8ZL0TIRaO0l9Fw8CumEYSNg3RJpJrg7Nagka
    name: mgmtproxy-vbdb6
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: mgmtproxy
      uid: abb12c1a-3e04-11ea-a8b0-0cc47ad46d50
    resourceVersion: "143353353"
    selfLink: /api/v1/namespaces/filedb/pods/mgmtproxy-vbdb6
    uid: 4dd906e7-5185-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: mgmtproxy
      - name: MSSQL_CONTAINER_TYPE
        value: service-proxy
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: SERVICE_PROXY_PORT
        value: "30777"
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      image: mcr.microsoft.com/mssql/bdc/mssql-service-proxy:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: service-proxy
      ports:
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/service-proxy
        name: service-proxy-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
        subPath: service-proxy
      - mountPath: /var/log
        name: logs
        subPath: service-proxy
      - mountPath: /var/run
        name: var-run
        subPath: service-proxy
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/certificates/agent
        name: mgmtproxy-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-service-proxy.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: mgmtproxy
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: ReplicaSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/opt
        name: data
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/secrets/certificates/agent
        name: mgmtproxy-agent-secret
      - mountPath: /var/run/secrets/credentials/service-proxy
        name: service-proxy-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb08
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: service-proxy-secret
      secret:
        defaultMode: 420
        secretName: mgmtproxy-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: metricsui-admin-secret
      secret:
        defaultMode: 420
        secretName: metricsui-admin-secret
    - emptyDir: {}
      name: data
    - emptyDir: {}
      name: logs
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: mgmtproxy-agent-secret
      secret:
        defaultMode: 420
        secretName: mgmtproxy-agent-secret
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T13:12:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T13:12:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-02-17T12:59:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6f33976c6599f75533c696cea1aed8bbae35de7632aa9421ff78080827537fa6
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:27Z"
    - containerID: docker://7f1e941d61a787f216007e2cdb130d689af637d0c88ae7e5fbe65cacd4eaebfc
      image: mcr.microsoft.com/mssql/bdc/mssql-service-proxy:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-service-proxy@sha256:cbf8901340dd150d1cd9bf85a0570dc70003e552891e6532b5e7e9ad93f7787b
      lastState: {}
      name: service-proxy
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-17T12:59:23Z"
    hostIP: 172.23.25.58
    phase: Running
    podIP: 172.24.59.81
    qosClass: Burstable
    startTime: "2020-02-17T12:59:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T22:31:47Z"
    generateName: nmnode-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: nmnode-0
      controller-revision-hash: nmnode-0-86686dd6d6
      plane: data
      pool-name: default
      pool-number: "0"
      role: namenode
      statefulset.kubernetes.io/pod-name: nmnode-0-0
    name: nmnode-0-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: nmnode-0
      uid: 2139e206-3e30-11ea-a8b0-0cc47ad46d50
    resourceVersion: "136195452"
    selfLink: /api/v1/namespaces/filedb/pods/nmnode-0-0
    uid: 2454db87-3e30-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - nmnode-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: nmnode
      - name: MSSQL_CONTAINER_TYPE
        value: hadoop
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: hadoop
      ports:
      - containerPort: 9000
        name: default-fs
        protocol: TCP
      - containerPort: 50470
        name: name-node-https
        protocol: TCP
      - containerPort: 14000
        name: http-fs
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      - containerPort: 50200
        name: tiering-port
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-master-pool-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/nmnode-0/var.cu1/opt
      - mountPath: /var/opt/hdfs/namenode
        name: idies-data
        subPath: Aris/nmnode-0/hdfs/namenode
      - mountPath: /var/log
        name: logs
        subPath: hadoop
      - mountPath: /var/run
        name: var-run
        subPath: hadoop
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: nmnode-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-namenode.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: nmnode
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/nmnode-0/cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/secrets/certificates/agent
        name: nmnode-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostname: nmnode-0-0
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb14
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: nmnode-0-svc
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-nmnode-0-0
    - name: logs
      persistentVolumeClaim:
        claimName: logs-nmnode-0-0
    - name: mssql-master-pool-secret
      secret:
        defaultMode: 420
        secretName: mssql-master-pool-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: mssql-hadoop-storage-0-configmap
      name: hadoop-config-volume
    - name: nmnode-0-agent-secret
      secret:
        defaultMode: 420
        secretName: nmnode-0-agent-secret
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T22:31:47Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T22:31:52Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T22:31:52Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T22:31:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2195090720bbb27190918ae8cc1d56aa56f1507cb3cdf80a3796b6452f8dbe0a
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T22:31:51Z"
    - containerID: docker://a6236314789431fb42984e128ec776da9b3c62f747f1760634f4a0d69619a2ba
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-hadoop@sha256:5865b18a7e138268104fae65d9289d9ebcebd8880944f1aa1b5d20b83c824010
      lastState: {}
      name: hadoop
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T22:31:49Z"
    hostIP: 172.23.25.64
    phase: Running
    podIP: 172.24.98.154
    qosClass: Burstable
    startTime: "2020-01-23T22:31:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-01-23T22:09:06Z"
    generateName: sparkhead-
    labels:
      MSSQL_CLUSTER: filedb
      app: sparkhead
      controller-revision-hash: sparkhead-77b8c4fd55
      plane: data
      role: sparkhead-pool
      statefulset.kubernetes.io/pod-name: sparkhead-0
    name: sparkhead-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: sparkhead
      uid: 32411a98-3e05-11ea-a8b0-0cc47ad46d50
    resourceVersion: "137283774"
    selfLink: /api/v1/namespaces/filedb/pods/sparkhead-0
    uid: f8cce786-3e2c-11ea-a8b0-0cc47ad46d50
  spec:
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: sparkhead
      - name: MSSQL_CONTAINER_TYPE
        value: hadoop-yarn-jobhistory
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: hadoop-yarn-jobhistory
      ports:
      - containerPort: 8088
        name: yarn-ui-8088
        protocol: TCP
      - containerPort: 8030
        name: yarn-8030
        protocol: TCP
      - containerPort: 8031
        name: yarn-8031
        protocol: TCP
      - containerPort: 8032
        name: yarn-8032
        protocol: TCP
      - containerPort: 8033
        name: yarn-8033
        protocol: TCP
      - containerPort: 19888
        name: job-19888
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-master-pool-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
        readOnly: true
      - mountPath: /var/log
        name: logs
        subPath: hadoop-yarn-jobhistory
      - mountPath: /var/run
        name: var-run
        subPath: hadoop-yarn-jobhistory
      - mountPath: /var/run/secrets/certificates/agent
        name: sparkhead-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: sparkhead
      - name: MSSQL_CONTAINER_TYPE
        value: hadoop-livy-sparkhistory
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8301"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8401"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: hadoop-livy-sparkhistory
      ports:
      - containerPort: 18080
        name: sparkhist-18080
        protocol: TCP
      - containerPort: 8998
        name: livy-8998
        protocol: TCP
      - containerPort: 8301
        name: agent-grpc-8301
        protocol: TCP
      - containerPort: 8401
        name: agent-srv-8401
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-master-pool-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
        readOnly: true
      - mountPath: /var/log
        name: logs
        subPath: hadoop-livy-sparkhistory
      - mountPath: /var/run
        name: var-run
        subPath: hadoop-livy-sparkhistory
      - mountPath: /var/run/secrets/certificates/agent
        name: sparkhead-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: sparkhead
      - name: MSSQL_CONTAINER_TYPE
        value: hadoop-hivemetastore
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8302"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8402"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: hadoop-hivemetastore
      ports:
      - containerPort: 9084
        name: hive-9084
        protocol: TCP
      - containerPort: 8302
        name: agent-grpc-8302
        protocol: TCP
      - containerPort: 8402
        name: agent-srv-8402
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-master-pool-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
        readOnly: true
      - mountPath: /var/log
        name: logs
        subPath: hadoop-hivemetastore
      - mountPath: /var/run
        name: var-run
        subPath: hadoop-hivemetastore
      - mountPath: /var/run/secrets/certificates/agent
        name: sparkhead-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-sparkhead-pool.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: sparkhead
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-master-pool-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: sparkhead-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: data
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: sparkhead-0
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb01
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: sparkhead-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: data-sparkhead-0
    - name: logs
      persistentVolumeClaim:
        claimName: logs-sparkhead-0
    - name: mssql-master-pool-secret
      secret:
        defaultMode: 420
        secretName: mssql-master-pool-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: node-admin-login-secrets
      secret:
        defaultMode: 420
        secretName: node-admin-login-secret
    - name: sparkhead-agent-secret
      secret:
        defaultMode: 420
        secretName: sparkhead-agent-secret
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - configMap:
        defaultMode: 420
        name: mssql-hadoop-sparkhead-configmap
      name: hadoop-config-volume
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T22:09:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T16:25:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-01-27T16:25:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-01-23T22:09:06Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c482027c2992b63e42f0ab3c3d03d06c19891b4e17033756d03b499056a68b82
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T22:09:10Z"
    - containerID: docker://7fe6c6bd76bc8cf54d64cc60a80baa5ba71bcd4fd4c159af39d4017cef4d3266
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-hadoop@sha256:5865b18a7e138268104fae65d9289d9ebcebd8880944f1aa1b5d20b83c824010
      lastState: {}
      name: hadoop-hivemetastore
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-01-23T22:09:09Z"
    - containerID: docker://0c06d799cf050b017541e9355770596dec52e14ce2aa9c26675cba1440bf6784
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-hadoop@sha256:5865b18a7e138268104fae65d9289d9ebcebd8880944f1aa1b5d20b83c824010
      lastState:
        terminated:
          containerID: docker://28446b7325e27ad3e518df04c169f193ff057878b6331d3cfc16508893b39d83
          exitCode: 2
          finishedAt: "2020-01-27T16:22:18Z"
          reason: Error
          startedAt: "2020-01-27T16:17:59Z"
      name: hadoop-livy-sparkhistory
      ready: true
      restartCount: 2
      state:
        running:
          startedAt: "2020-01-27T16:22:33Z"
    - containerID: docker://b84562418700eec63a24696496fda9a53398faf22caa3dd33aff02788f64abda
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-hadoop@sha256:5865b18a7e138268104fae65d9289d9ebcebd8880944f1aa1b5d20b83c824010
      lastState:
        terminated:
          containerID: docker://fe36e048653647ea8caf017d57337dd11c6e0fb1e05d2b25f8e2b5968bafa689
          exitCode: 2
          finishedAt: "2020-01-27T16:25:47Z"
          reason: Error
          startedAt: "2020-01-23T22:09:08Z"
      name: hadoop-yarn-jobhistory
      ready: true
      restartCount: 1
      state:
        running:
          startedAt: "2020-01-27T16:25:48Z"
    hostIP: 172.23.25.51
    phase: Running
    podIP: 172.24.39.35
    qosClass: Burstable
    startTime: "2020-01-23T22:09:06Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-02-13T14:55:22Z"
    generateName: storage-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: storage-0
      controller-revision-hash: storage-0-685788fb44
      plane: data
      pool-name: default
      pool-number: "0"
      role: storage-pool
      statefulset.kubernetes.io/pod-name: storage-0-0
    name: storage-0-0
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: storage-0
      uid: 43fff39d-3e30-11ea-a8b0-0cc47ad46d50
    resourceVersion: "145798443"
    selfLink: /api/v1/namespaces/filedb/pods/storage-0-0
    uid: dc683fd8-4e70-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - storage-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: hadoop
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: INCLUDE_SPARK
        value: "true"
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: hadoop
      ports:
      - containerPort: 50470
        name: port-50470
        protocol: TCP
      - containerPort: 50075
        name: port-50075
        protocol: TCP
      - containerPort: 50475
        name: port-50475
        protocol: TCP
      - containerPort: 50020
        name: port-50020
        protocol: TCP
      - containerPort: 50200
        name: tiering-port
        protocol: TCP
      - containerPort: 9000
        name: port-9000
        protocol: TCP
      - containerPort: 50010
        name: port-50010
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8304
        name: nm-8304
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/hadoop
      - mountPath: /var/opt/hdfs/datanode
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/hdfs/datanode
      - mountPath: /var/log
        name: logs
        subPath: hadoop
      - mountPath: /var/run
        name: var-run
        subPath: hadoop
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        mountPropagation: HostToContainer
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8301"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8401"
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8301
        name: agent-grpc-8301
        protocol: TCP
      - containerPort: 8401
        name: agent-srv-8401
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/mssql-server
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        mountPropagation: HostToContainer
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/collectd
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-storage-pool-default.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: storage-0-0
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb12
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: storage-0-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-storage-0-0
    - name: logs
      persistentVolumeClaim:
        claimName: logs-storage-0-0
    - name: mssql-storage-pool-default-secret
      secret:
        defaultMode: 420
        secretName: mssql-storage-pool-default-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: storage-0-agent-secret
      secret:
        defaultMode: 420
        secretName: storage-0-agent-secret
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - configMap:
        defaultMode: 420
        name: mssql-hadoop-storage-0-configmap
      name: hadoop-config-volume
    - hostPath:
        path: /sciserver
        type: ""
      name: autofs-sciserver
    - hostPath:
        path: /srv
        type: ""
      name: srv
    - hostPath:
        path: /nvme
        type: ""
      name: nvme
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-02-13T15:00:25Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-02-13T15:01:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-02-13T15:01:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-02-13T15:00:25Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://9588d90bb3b1f43af59a5956e90a359b912360f37bd19a5d6c7ac36e2a41fe12
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-13T15:00:29Z"
    - containerID: docker://68bfa28e1b62e48980f4540feae756f2ac581478bd6cfa018b47b5caa0907b98
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-13T15:00:29Z"
    - containerID: docker://23bd9d4d3363cfc48be6d19e1a46ea068c63439160b183837f155aff6aa76c12
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-hadoop@sha256:5865b18a7e138268104fae65d9289d9ebcebd8880944f1aa1b5d20b83c824010
      lastState: {}
      name: hadoop
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-13T15:00:28Z"
    - containerID: docker://a41ba9e7ea864ff1b614af39176c1a99b63db49ecf9ff5d68cb520d4cba0a557
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-13T15:00:28Z"
    hostIP: 172.23.25.62
    phase: Running
    podIP: 172.24.77.176
    qosClass: Burstable
    startTime: "2020-02-13T15:00:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-02-24T20:39:44Z"
    generateName: storage-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: storage-0
      controller-revision-hash: storage-0-685788fb44
      plane: data
      pool-name: default
      pool-number: "0"
      role: storage-pool
      statefulset.kubernetes.io/pod-name: storage-0-1
    name: storage-0-1
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: storage-0
      uid: 43fff39d-3e30-11ea-a8b0-0cc47ad46d50
    resourceVersion: "145481240"
    selfLink: /api/v1/namespaces/filedb/pods/storage-0-1
    uid: ca215101-5745-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - storage-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: hadoop
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: INCLUDE_SPARK
        value: "true"
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: hadoop
      ports:
      - containerPort: 50470
        name: port-50470
        protocol: TCP
      - containerPort: 50075
        name: port-50075
        protocol: TCP
      - containerPort: 50475
        name: port-50475
        protocol: TCP
      - containerPort: 50020
        name: port-50020
        protocol: TCP
      - containerPort: 50200
        name: tiering-port
        protocol: TCP
      - containerPort: 9000
        name: port-9000
        protocol: TCP
      - containerPort: 50010
        name: port-50010
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8304
        name: nm-8304
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/hadoop
      - mountPath: /var/opt/hdfs/datanode
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/hdfs/datanode
      - mountPath: /var/log
        name: logs
        subPath: hadoop
      - mountPath: /var/run
        name: var-run
        subPath: hadoop
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        mountPropagation: HostToContainer
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8301"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8401"
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8301
        name: agent-grpc-8301
        protocol: TCP
      - containerPort: 8401
        name: agent-srv-8401
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/mssql-server
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        mountPropagation: HostToContainer
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/collectd
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-storage-pool-default.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: storage-0-1
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb11
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: storage-0-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-storage-0-1
    - name: logs
      persistentVolumeClaim:
        claimName: logs-storage-0-1
    - name: mssql-storage-pool-default-secret
      secret:
        defaultMode: 420
        secretName: mssql-storage-pool-default-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: storage-0-agent-secret
      secret:
        defaultMode: 420
        secretName: storage-0-agent-secret
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - configMap:
        defaultMode: 420
        name: mssql-hadoop-storage-0-configmap
      name: hadoop-config-volume
    - hostPath:
        path: /sciserver
        type: ""
      name: autofs-sciserver
    - hostPath:
        path: /srv
        type: ""
      name: srv
    - hostPath:
        path: /nvme
        type: ""
      name: nvme
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-02-24T20:45:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-02-24T20:48:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-02-24T20:48:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-02-24T20:45:17Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://cd58dfb44bb374afe4cdd04dee03ded2c5e0b1e37a87034c2d8fc86a636f3f17
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-24T20:47:14Z"
    - containerID: docker://a022f3a4bd9ef7b2819f352f5f33b66b5db0804ddfe48677d3eb6650390e8ca7
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-24T20:47:14Z"
    - containerID: docker://e19f0b1a092c25355fbe4bd0be7b4881e150e109b8fa6f928aa9951fb97e1155
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-hadoop@sha256:5865b18a7e138268104fae65d9289d9ebcebd8880944f1aa1b5d20b83c824010
      lastState: {}
      name: hadoop
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-24T20:47:12Z"
    - containerID: docker://b803f5fdeebf1bf8813b47e5880e4f44400916465272311d21bbf6e035049cd2
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-24T20:47:13Z"
    hostIP: 172.23.25.61
    phase: Running
    podIP: 172.24.104.166
    qosClass: Burstable
    startTime: "2020-02-24T20:45:17Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-02-26T23:02:05Z"
    generateName: storage-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: storage-0
      controller-revision-hash: storage-0-685788fb44
      plane: data
      pool-name: default
      pool-number: "0"
      role: storage-pool
      statefulset.kubernetes.io/pod-name: storage-0-2
    name: storage-0-2
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: storage-0
      uid: 43fff39d-3e30-11ea-a8b0-0cc47ad46d50
    resourceVersion: "146092294"
    selfLink: /api/v1/namespaces/filedb/pods/storage-0-2
    uid: 022391ff-58ec-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - storage-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: hadoop
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: INCLUDE_SPARK
        value: "true"
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: hadoop
      ports:
      - containerPort: 50470
        name: port-50470
        protocol: TCP
      - containerPort: 50075
        name: port-50075
        protocol: TCP
      - containerPort: 50475
        name: port-50475
        protocol: TCP
      - containerPort: 50020
        name: port-50020
        protocol: TCP
      - containerPort: 50200
        name: tiering-port
        protocol: TCP
      - containerPort: 9000
        name: port-9000
        protocol: TCP
      - containerPort: 50010
        name: port-50010
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8304
        name: nm-8304
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/hadoop
      - mountPath: /var/opt/hdfs/datanode
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/hdfs/datanode
      - mountPath: /var/log
        name: logs
        subPath: hadoop
      - mountPath: /var/run
        name: var-run
        subPath: hadoop
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        mountPropagation: HostToContainer
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8301"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8401"
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8301
        name: agent-grpc-8301
        protocol: TCP
      - containerPort: 8401
        name: agent-srv-8401
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/mssql-server
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        mountPropagation: HostToContainer
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/collectd
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-storage-pool-default.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: storage-0-2
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb01
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: storage-0-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-storage-0-2
    - name: logs
      persistentVolumeClaim:
        claimName: logs-storage-0-2
    - name: mssql-storage-pool-default-secret
      secret:
        defaultMode: 420
        secretName: mssql-storage-pool-default-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: storage-0-agent-secret
      secret:
        defaultMode: 420
        secretName: storage-0-agent-secret
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - configMap:
        defaultMode: 420
        name: mssql-hadoop-storage-0-configmap
      name: hadoop-config-volume
    - hostPath:
        path: /sciserver
        type: ""
      name: autofs-sciserver
    - hostPath:
        path: /srv
        type: ""
      name: srv
    - hostPath:
        path: /nvme
        type: ""
      name: nvme
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-02-26T23:07:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-02-26T23:09:41Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-02-26T23:09:41Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-02-26T23:07:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0c77853bfa194482b38b0e7b2fe9fe69171f83924cb30ae1c71527bbfd23f4b3
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-26T23:08:22Z"
    - containerID: docker://35f8effdc9bf8255241a69b21049374376a3f37aa18b1aa05e481b35ae745f4a
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-26T23:08:22Z"
    - containerID: docker://cc75d8960f6c77076f7a67cc263af3e4eeff35b0e69876272a7a355d2c9b082e
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-hadoop@sha256:5865b18a7e138268104fae65d9289d9ebcebd8880944f1aa1b5d20b83c824010
      lastState: {}
      name: hadoop
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-26T23:08:20Z"
    - containerID: docker://4b422026292731b92ed3fe3a6728e46fb45a0cf3ee6c5032df7afe3e58cfad4c
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-26T23:08:21Z"
    hostIP: 172.23.25.51
    phase: Running
    podIP: 172.24.39.44
    qosClass: Burstable
    startTime: "2020-02-26T23:07:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-02-26T23:00:06Z"
    generateName: storage-0-
    labels:
      MSSQL_CLUSTER: filedb
      app: storage-0
      controller-revision-hash: storage-0-685788fb44
      plane: data
      pool-name: default
      pool-number: "0"
      role: storage-pool
      statefulset.kubernetes.io/pod-name: storage-0-3
    name: storage-0-3
    namespace: filedb
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: storage-0
      uid: 43fff39d-3e30-11ea-a8b0-0cc47ad46d50
    resourceVersion: "146092283"
    selfLink: /api/v1/namespaces/filedb/pods/storage-0-3
    uid: bacbede7-58eb-11ea-a8b0-0cc47ad46d50
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - storage-0
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: hadoop
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8300"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8400"
      - name: INCLUDE_SPARK
        value: "true"
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: hadoop
      ports:
      - containerPort: 50470
        name: port-50470
        protocol: TCP
      - containerPort: 50075
        name: port-50075
        protocol: TCP
      - containerPort: 50475
        name: port-50475
        protocol: TCP
      - containerPort: 50020
        name: port-50020
        protocol: TCP
      - containerPort: 50200
        name: tiering-port
        protocol: TCP
      - containerPort: 9000
        name: port-9000
        protocol: TCP
      - containerPort: 50010
        name: port-50010
        protocol: TCP
      - containerPort: 8300
        name: agent-grpc-8300
        protocol: TCP
      - containerPort: 8304
        name: nm-8304
        protocol: TCP
      - containerPort: 8400
        name: agent-srv-8400
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/hadoop
      - mountPath: /var/opt/hdfs/datanode
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/hdfs/datanode
      - mountPath: /var/log
        name: logs
        subPath: hadoop
      - mountPath: /var/run
        name: var-run
        subPath: hadoop
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        mountPropagation: HostToContainer
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: mssql-server
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8301"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8401"
      - name: ACCEPT_EULA
        value: "Y"
      - name: MSSQL_POD_KIND
        value: StatefulSet
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: mssql-server
      ports:
      - containerPort: 1433
        name: port-1433
        protocol: TCP
      - containerPort: 8301
        name: agent-grpc-8301
        protocol: TCP
      - containerPort: 8401
        name: agent-srv-8401
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cat
          - /var/run/container.ready
        failureThreshold: 210
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_PTRACE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/mssql-server
      - mountPath: /var/log
        name: logs
        subPath: mssql-server
      - mountPath: /var/run
        name: var-run
        subPath: mssql-server
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/configmaps/hadoop
        name: hadoop-config-volume
      - mountPath: /pvcadmin
        name: idies-data
        subPath: Aris
      - mountPath: /sciserver
        mountPropagation: HostToContainer
        name: autofs-sciserver
      - mountPath: /srv
        name: srv
      - mountPath: /nvme
        name: nvme
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: MONITORING_HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: SQL_HOSTNAME
        value: 127.0.0.1
      - name: SQL_POLL_INTERVAL
        value: "5"
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: collectd
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8310"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8410"
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: collectd
      ports:
      - containerPort: 8310
        name: agent-grpc-8310
        protocol: TCP
      - containerPort: 8410
        name: agent-srv-8410
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
        name: metricsdb-wo-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/collectd
      - mountPath: /var/log
        name: logs
        subPath: collectd
      - mountPath: /var/run
        name: var-run
        subPath: collectd
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    - env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: logsdb-svc
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENTBIT_CONFIG
        value: fluentbit-storage-pool-default.conf
      - name: MSSQL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MSSQL_POD_TYPE
        value: storage
      - name: MSSQL_CONTAINER_TYPE
        value: fluentbit
      - name: MSSQL_POD_KIND
        value: StatefulSet
      - name: MSSQL_AGENT_GRPC_PORT
        value: "8311"
      - name: MSSQL_AGENT_HTTPS_PORT
        value: "8411"
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imagePullPolicy: Always
      name: fluentbit
      ports:
      - containerPort: 2020
        name: fluentb-2020
        protocol: TCP
      - containerPort: 8311
        name: agent-grpc-8311
        protocol: TCP
      - containerPort: 8411
        name: agent-srv-8411
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/credentials/pool
        name: mssql-storage-pool-default-secret
        readOnly: true
      - mountPath: /var/run/secrets/credentials/controller-internal
        name: controller-internal-secret
        readOnly: true
      - mountPath: /var/run/secrets/certificates/agent
        name: storage-0-agent-secret
        readOnly: true
      - mountPath: /var/opt
        name: idies-data
        subPath: Aris/mssql-storage-pool-default/cu1/fluentbit
      - mountPath: /var/log
        name: logs
        subPath: fluentbit
      - mountPath: /mnt/logs
        name: logs
        readOnly: true
      - mountPath: /var/run
        name: var-run
        subPath: fluentbit
      - mountPath: /var/run/configmaps/cluster
        name: cluster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-ct99m
        readOnly: true
    dnsConfig:
      options:
      - name: timeout
        value: "30"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: storage-0-3
    imagePullSecrets:
    - name: mssql-private-registry
    nodeName: filedb10
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: storage-0-svc
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: logs
      persistentVolumeClaim:
        claimName: logs-storage-0-3
    - name: idies-data
      persistentVolumeClaim:
        claimName: idies-data-storage-0-3
    - name: mssql-storage-pool-default-secret
      secret:
        defaultMode: 420
        secretName: mssql-storage-pool-default-secret
    - name: controller-internal-secret
      secret:
        defaultMode: 420
        secretName: controller-internal-secret
    - name: storage-0-agent-secret
      secret:
        defaultMode: 420
        secretName: storage-0-agent-secret
    - name: metricsdb-wo-secret
      secret:
        defaultMode: 420
        secretName: metricsdb-wo-secret
    - emptyDir:
        medium: Memory
      name: var-run
    - configMap:
        defaultMode: 420
        name: cluster-configmap
      name: cluster-config-volume
    - configMap:
        defaultMode: 420
        name: mssql-hadoop-storage-0-configmap
      name: hadoop-config-volume
    - hostPath:
        path: /sciserver
        type: ""
      name: autofs-sciserver
    - hostPath:
        path: /srv
        type: ""
      name: srv
    - hostPath:
        path: /nvme
        type: ""
      name: nvme
    - name: default-token-ct99m
      secret:
        defaultMode: 420
        secretName: default-token-ct99m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-02-26T23:05:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-02-26T23:09:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-02-26T23:09:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-02-26T23:05:38Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://3798408f2f3f43ef72a2caed50e7b9af87d6e4b4eff5c56ea3bf0b80c6884c43
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd@sha256:9d83b25037211a111db5a3c0d38a7ece4349f1d9f470287a7be30b150eca3963
      lastState: {}
      name: collectd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-26T23:08:20Z"
    - containerID: docker://4224d6e4745fd99e50d89a840d913a45dedcfe4ca8a68bab9136a566ec5ff848
      image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit@sha256:ba0942d22cd9cd1ebb6080467cb566aa9c46997e65b009523752bdd7a20131d6
      lastState: {}
      name: fluentbit
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-26T23:08:20Z"
    - containerID: docker://eb8a4594034bc65d429eca39be5f3d527a734992e03cdcdcbcce7c4847dd96ae
      image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-hadoop@sha256:5865b18a7e138268104fae65d9289d9ebcebd8880944f1aa1b5d20b83c824010
      lastState: {}
      name: hadoop
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-26T23:08:18Z"
    - containerID: docker://73e6ac88f582c8320a4a399975d9a80c00842315d27ea488af9b860455db3225
      image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
      imageID: docker-pullable://mcr.microsoft.com/mssql/bdc/mssql-server-data@sha256:c1aa9f992a126cf384f0cccbdd0379ac6b9a1930a150037f1184a6a28f442734
      lastState: {}
      name: mssql-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: "2020-02-26T23:08:19Z"
    hostIP: 172.23.25.60
    phase: Running
    podIP: 172.24.75.7
    qosClass: Burstable
    startTime: "2020-02-26T23:05:38Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-29T22:28:18Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: app-reduce-abc-123
      plane: data
      role: application
    name: app-reduce-abc-123
    namespace: filedb
    resourceVersion: "137938260"
    selfLink: /api/v1/namespaces/filedb/services/app-reduce-abc-123
    uid: a6023462-42e6-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: 172.24.0.10
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
    selector:
      app: app-reduce-abc-123
      plane: data
      role: application
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:46Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: appproxy
      plane: data
      role: proxy
    name: appproxy-svc
    namespace: filedb
    resourceVersion: "136130847"
    selfLink: /api/v1/namespaces/filedb/services/appproxy-svc
    uid: 1c997aa6-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: port-app-service-proxy
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: appproxy
      plane: data
      role: proxy
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:46Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: appproxy
      plane: data
      role: proxy
    name: appproxy-svc-external
    namespace: filedb
    resourceVersion: "136130850"
    selfLink: /api/v1/namespaces/filedb/services/appproxy-svc-external
    uid: 1c99f3b0-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: 172.24.0.194
    externalTrafficPolicy: Cluster
    ports:
    - name: port-app-service-proxy
      nodePort: 30778
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: appproxy
      plane: data
      role: proxy
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:44Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: compute-0
      plane: data
      pool-name: default
      pool-number: "0"
      role: compute-pool
    name: compute-0-svc
    namespace: filedb
    resourceVersion: "136130826"
    selfLink: /api/v1/namespaces/filedb/services/compute-0-svc
    uid: 1b86396c-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: port-1433
      port: 1433
      protocol: TCP
      targetPort: 1433
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-grpc-8310
      port: 8310
      protocol: TCP
      targetPort: 8310
    - name: agent-grpc-8311
      port: 8311
      protocol: TCP
      targetPort: 8311
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    - name: agent-srv-8410
      port: 8410
      protocol: TCP
      targetPort: 8410
    - name: agent-srv-8411
      port: 8411
      protocol: TCP
      targetPort: 8411
    - name: shuffle-5502
      port: 5502
      protocol: TCP
      targetPort: 5502
    publishNotReadyAddresses: true
    selector:
      app: compute-0
      plane: data
      pool-name: default
      pool-number: "0"
      role: compute-pool
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:18:55Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: controldb
      plane: control
      role: controldb
    name: controldb-svc
    namespace: filedb
    resourceVersion: "136129130"
    selfLink: /api/v1/namespaces/filedb/services/controldb-svc
    uid: 6f6d8310-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: 172.24.0.206
    ports:
    - name: database-port
      port: 1433
      protocol: TCP
      targetPort: 1433
    - name: agent-grpc-8311
      port: 8311
      protocol: TCP
      targetPort: 8311
    - name: agent-srv-8411
      port: 8411
      protocol: TCP
      targetPort: 8411
    selector:
      app: controldb
      plane: control
      role: controldb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:18:55Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: controller
      plane: control
      role: controller
    name: controller-svc
    namespace: filedb
    resourceVersion: "136129124"
    selfLink: /api/v1/namespaces/filedb/services/controller-svc
    uid: 6f6b8f4d-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: controller-https-port
      port: 443
      protocol: TCP
      targetPort: 443
    - name: agent-grpc-8311
      port: 8311
      protocol: TCP
      targetPort: 8311
    - name: agent-grpc-8301
      port: 8301
      protocol: TCP
      targetPort: 8301
    - name: agent-srv-8411
      port: 8411
      protocol: TCP
      targetPort: 8411
    - name: agent-srv-8401
      port: 8401
      protocol: TCP
      targetPort: 8401
    selector:
      app: controller
      plane: control
      role: controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:18:55Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: controller
      plane: control
      role: controller
    name: controller-svc-external
    namespace: filedb
    resourceVersion: "136129136"
    selfLink: /api/v1/namespaces/filedb/services/controller-svc-external
    uid: 6f6f87fb-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: 172.24.0.199
    externalTrafficPolicy: Cluster
    ports:
    - name: port-1
      nodePort: 30080
      port: 443
      protocol: TCP
      targetPort: controller-port
    selector:
      app: controller
      plane: control
      role: controller
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:50Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: data-0
      plane: data
      pool-name: default
      pool-number: "0"
      role: data-pool
    name: data-0-svc
    namespace: filedb
    resourceVersion: "136130929"
    selfLink: /api/v1/namespaces/filedb/services/data-0-svc
    uid: 1f410edb-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: rpc-port-135
      port: 135
      protocol: TCP
      targetPort: 135
    - name: port-1433
      port: 1433
      protocol: TCP
      targetPort: 1433
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-grpc-8310
      port: 8310
      protocol: TCP
      targetPort: 8310
    - name: agent-grpc-8311
      port: 8311
      protocol: TCP
      targetPort: 8311
    - name: agent-grpc-8312
      port: 8312
      protocol: TCP
      targetPort: 8312
    - name: agent-grpc-8313
      port: 8313
      protocol: TCP
      targetPort: 8313
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    - name: agent-srv-8410
      port: 8410
      protocol: TCP
      targetPort: 8410
    - name: agent-srv-8411
      port: 8411
      protocol: TCP
      targetPort: 8411
    - name: agent-srv-8412
      port: 8412
      protocol: TCP
      targetPort: 8412
    - name: agent-srv-8413
      port: 8413
      protocol: TCP
      targetPort: 8413
    - name: dtc-port-51000
      port: 51000
      protocol: TCP
      targetPort: 51000
    selector:
      app: data-0
      plane: data
      pool-name: default
      pool-number: "0"
      role: data-pool
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:51Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: gateway
      plane: control
      role: gateway
    name: gateway-svc
    namespace: filedb
    resourceVersion: "136131063"
    selfLink: /api/v1/namespaces/filedb/services/gateway-svc
    uid: 1fe4477d-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: knox-port-8443
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-grpc-8311
      port: 8311
      protocol: TCP
      targetPort: 8311
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    - name: agent-srv-8411
      port: 8411
      protocol: TCP
      targetPort: 8411
    selector:
      app: gateway
      plane: control
      role: gateway
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:51Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: gateway
      plane: control
      role: gateway
    name: gateway-svc-external
    namespace: filedb
    resourceVersion: "136131062"
    selfLink: /api/v1/namespaces/filedb/services/gateway-svc-external
    uid: 1fe3f232-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: 172.24.0.4
    externalTrafficPolicy: Cluster
    ports:
    - name: port-knox
      nodePort: 30443
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      app: gateway
      plane: control
      role: gateway
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:20:36Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: logsdb
      plane: control
      role: monitoring
    name: logsdb-svc
    namespace: filedb
    resourceVersion: "136129825"
    selfLink: /api/v1/namespaces/filedb/services/logsdb-svc
    uid: abaec674-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: es-http
      port: 9200
      protocol: TCP
      targetPort: 9200
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    selector:
      app: logsdb
      plane: control
      role: monitoring
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:20:34Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: logsui
      plane: control
      role: monitoring
    name: logsui-svc
    namespace: filedb
    resourceVersion: "136129739"
    selfLink: /api/v1/namespaces/filedb/services/logsui-svc
    uid: aa7e447c-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: kibana-5601
      port: 5601
      protocol: TCP
      targetPort: 5601
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    selector:
      app: logsui
      plane: control
      role: monitoring
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:49Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: master
      mssql.microsoft.com/sql-instance: master
      plane: data
      role: master-pool
      type: sqlservr
    name: master-p-svc
    namespace: filedb
    resourceVersion: "136130887"
    selfLink: /api/v1/namespaces/filedb/services/master-p-svc
    uid: 1e968efc-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: 172.24.0.152
    ports:
    - name: tds
      port: 1433
      protocol: TCP
      targetPort: 1433
    selector:
      app: master
      mssql.microsoft.com/sql-instance: master
      plane: data
      role: master-pool
      type: sqlservr
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:49Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: master
      mssql.microsoft.com/sql-instance: master
      plane: data
      role: master-pool
      type: sqlservr
    name: master-svc
    namespace: filedb
    resourceVersion: "136130883"
    selfLink: /api/v1/namespaces/filedb/services/master-svc
    uid: 1e962355-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: rpc-port-135
      port: 135
      protocol: TCP
      targetPort: 135
    - name: port-8088
      port: 8088
      protocol: TCP
      targetPort: 8088
    - name: port-50075
      port: 50075
      protocol: TCP
      targetPort: 50075
    - name: port-50020
      port: 50020
      protocol: TCP
      targetPort: 50020
    - name: port-50010
      port: 50010
      protocol: TCP
      targetPort: 50010
    - name: port-8031
      port: 8031
      protocol: TCP
      targetPort: 8031
    - name: port-8032
      port: 8032
      protocol: TCP
      targetPort: 8032
    - name: port-8033
      port: 8033
      protocol: TCP
      targetPort: 8033
    - name: port-8040
      port: 8040
      protocol: TCP
      targetPort: 8040
    - name: port-8042
      port: 8042
      protocol: TCP
      targetPort: 8042
    - name: port-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: port-1433
      port: 1433
      protocol: TCP
      targetPort: 1433
    - name: port-1533
      port: 1533
      protocol: TCP
      targetPort: 1533
    - name: port-9995
      port: 9995
      protocol: TCP
      targetPort: 9995
    - name: port-8998
      port: 8998
      protocol: TCP
      targetPort: 8998
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-grpc-8301
      port: 8301
      protocol: TCP
      targetPort: 8301
    - name: agent-grpc-8302
      port: 8302
      protocol: TCP
      targetPort: 8302
    - name: agent-grpc-8310
      port: 8310
      protocol: TCP
      targetPort: 8310
    - name: agent-grpc-8311
      port: 8311
      protocol: TCP
      targetPort: 8311
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    - name: agent-srv-8401
      port: 8401
      protocol: TCP
      targetPort: 8401
    - name: agent-srv-8402
      port: 8402
      protocol: TCP
      targetPort: 8402
    - name: agent-srv-8410
      port: 8410
      protocol: TCP
      targetPort: 8410
    - name: agent-srv-8411
      port: 8411
      protocol: TCP
      targetPort: 8411
    - name: agent-port-8312
      port: 8312
      protocol: TCP
      targetPort: 8312
    - name: dtc-port-51000
      port: 51000
      protocol: TCP
      targetPort: 51000
    publishNotReadyAddresses: true
    selector:
      app: master
      mssql.microsoft.com/sql-instance: master
      plane: data
      role: master-pool
      type: sqlservr
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:49Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: master
      mssql.microsoft.com/sql-instance: master
      plane: data
      role: master-pool
      type: sqlservr
    name: master-svc-external
    namespace: filedb
    resourceVersion: "136130882"
    selfLink: /api/v1/namespaces/filedb/services/master-svc-external
    uid: 1e95fb49-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: 172.24.0.25
    externalTrafficPolicy: Cluster
    ports:
    - name: port-sql
      nodePort: 31433
      port: 1433
      protocol: TCP
      targetPort: 1433
    selector:
      app: master
      mssql.microsoft.com/sql-instance: master
      plane: data
      role: master-pool
      type: sqlservr
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:20:34Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsdb
      plane: control
      role: monitoring
    name: metricsdb-svc
    namespace: filedb
    resourceVersion: "136129734"
    selfLink: /api/v1/namespaces/filedb/services/metricsdb-svc
    uid: aa7c97d5-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: influxdb-8086
      port: 8086
      protocol: TCP
      targetPort: 8086
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    selector:
      app: metricsdb
      plane: control
      role: monitoring
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:20:34Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: metricsui
      plane: control
      role: monitoring
    name: metricsui-svc
    namespace: filedb
    resourceVersion: "136129736"
    selfLink: /api/v1/namespaces/filedb/services/metricsui-svc
    uid: aa7d6a52-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: grafana-3000
      port: 3000
      protocol: TCP
      targetPort: 3000
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    selector:
      app: metricsui
      plane: control
      role: monitoring
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:20:36Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: mgmtproxy
      plane: control
      role: proxy
    name: mgmtproxy-svc
    namespace: filedb
    resourceVersion: "136129817"
    selfLink: /api/v1/namespaces/filedb/services/mgmtproxy-svc
    uid: abab3150-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: port-serviceproxy
      port: 443
      protocol: TCP
      targetPort: 443
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-grpc-8311
      port: 8311
      protocol: TCP
      targetPort: 8311
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    - name: agent-srv-8411
      port: 8411
      protocol: TCP
      targetPort: 8411
    selector:
      app: mgmtproxy
      plane: control
      role: proxy
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:20:36Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: mgmtproxy
      plane: control
      role: proxy
    name: mgmtproxy-svc-external
    namespace: filedb
    resourceVersion: "136129819"
    selfLink: /api/v1/namespaces/filedb/services/mgmtproxy-svc-external
    uid: ababa4d7-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: 172.24.0.251
    externalTrafficPolicy: Cluster
    ports:
    - name: port-serviceproxy
      nodePort: 30777
      port: 443
      protocol: TCP
      targetPort: 443
    selector:
      app: mgmtproxy
      plane: control
      role: proxy
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:23:42Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: nmnode-0
      plane: data
      pool-name: default
      pool-number: "0"
      role: namenode
    name: nmnode-0-svc
    namespace: filedb
    resourceVersion: "136130773"
    selfLink: /api/v1/namespaces/filedb/services/nmnode-0-svc
    uid: 1a79cfce-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: default-fs
      port: 9000
      protocol: TCP
      targetPort: 9000
    - name: name-node-https
      port: 50470
      protocol: TCP
      targetPort: 50470
    - name: http-fs
      port: 14000
      protocol: TCP
      targetPort: 14000
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-grpc-8311
      port: 8311
      protocol: TCP
      targetPort: 8311
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    - name: agent-srv-8411
      port: 8411
      protocol: TCP
      targetPort: 8411
    - name: fluentb-2020
      port: 2020
      protocol: TCP
      targetPort: 2020
    - name: tiering-port
      port: 50200
      protocol: TCP
      targetPort: 50200
    selector:
      app: nmnode-0
      plane: data
      pool-name: default
      pool-number: "0"
      role: namenode
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:24:22Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: sparkhead
      plane: data
      role: sparkhead-pool
    name: sparkhead-svc
    namespace: filedb
    resourceVersion: "136131407"
    selfLink: /api/v1/namespaces/filedb/services/sparkhead-svc
    uid: 323b51f0-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: rpc-port-135
      port: 135
      protocol: TCP
      targetPort: 135
    - name: rm-webui-8088
      port: 8088
      protocol: TCP
      targetPort: 8088
    - name: rm-8031
      port: 8031
      protocol: TCP
      targetPort: 8031
    - name: rm-8032
      port: 8032
      protocol: TCP
      targetPort: 8032
    - name: rm-8033
      port: 8033
      protocol: TCP
      targetPort: 8033
    - name: hbase-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: sql-1433
      port: 1433
      protocol: TCP
      targetPort: 1433
    - name: hostmonitor
      port: 9995
      protocol: TCP
      targetPort: 9995
    - name: livy-8998
      port: 8998
      protocol: TCP
      targetPort: 8998
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-grpc-8301
      port: 8301
      protocol: TCP
      targetPort: 8301
    - name: agent-grpc-8302
      port: 8302
      protocol: TCP
      targetPort: 8302
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    - name: agent-srv-8401
      port: 8401
      protocol: TCP
      targetPort: 8401
    - name: agent-srv-8402
      port: 8402
      protocol: TCP
      targetPort: 8402
    - name: dtc-port-51000
      port: 51000
      protocol: TCP
      targetPort: 51000
    selector:
      app: sparkhead
      plane: data
      role: sparkhead-pool
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-01-23T17:24:23Z"
    labels:
      MSSQL_CLUSTER: filedb
      app: storage-0
      plane: data
      pool-name: default
      pool-number: "0"
      role: storage-pool
    name: storage-0-svc
    namespace: filedb
    resourceVersion: "136131438"
    selfLink: /api/v1/namespaces/filedb/services/storage-0-svc
    uid: 32903bd9-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    clusterIP: None
    ports:
    - name: port-50470
      port: 50470
      protocol: TCP
      targetPort: 50470
    - name: port-50075
      port: 50075
      protocol: TCP
      targetPort: 50075
    - name: tiering-port
      port: 50200
      protocol: TCP
      targetPort: 50200
    - name: port-50020
      port: 50020
      protocol: TCP
      targetPort: 50020
    - name: port-9000
      port: 9000
      protocol: TCP
      targetPort: 9000
    - name: port-50010
      port: 50010
      protocol: TCP
      targetPort: 50010
    - name: port-8040
      port: 8040
      protocol: TCP
      targetPort: 8040
    - name: port-8042
      port: 8042
      protocol: TCP
      targetPort: 8042
    - name: port-1433
      port: 1433
      protocol: TCP
      targetPort: 1433
    - name: knox-port-8443
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: agent-grpc-8300
      port: 8300
      protocol: TCP
      targetPort: 8300
    - name: agent-grpc-8301
      port: 8301
      protocol: TCP
      targetPort: 8301
    - name: agent-grpc-8310
      port: 8310
      protocol: TCP
      targetPort: 8310
    - name: agent-grpc-8311
      port: 8311
      protocol: TCP
      targetPort: 8311
    - name: agent-srv-8400
      port: 8400
      protocol: TCP
      targetPort: 8400
    - name: agent-srv-8401
      port: 8401
      protocol: TCP
      targetPort: 8401
    - name: agent-srv-8410
      port: 8410
      protocol: TCP
      targetPort: 8410
    - name: agent-srv-8411
      port: 8411
      protocol: TCP
      targetPort: 8411
    selector:
      app: storage-0
      plane: data
      pool-name: default
      pool-number: "0"
      role: storage-pool
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2020-01-23T17:20:31Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: metricsdc
    namespace: filedb
    resourceVersion: "145798594"
    selfLink: /apis/apps/v1/namespaces/filedb/daemonsets/metricsdc
    uid: a85d170d-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: metricsdc
        plane: control
        role: monitoring
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: metricsdc
          plane: control
          role: monitoring
          version: alBdJCj2bv0biUtMA9X-7pub7lwVumUMYoxCQ-FsCD00a
      spec:
        containers:
        - env:
          - name: MONITORING_HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: HOST_MOUNT_PREFIX
            value: /rootfs
          - name: HOST_PROC
            value: /rootfs/proc
          - name: HOST_SYS
            value: /rootfs/sys
          - name: HOST_ETC
            value: /rootfs/etc
          - name: MSSQL_POD_TYPE
            value: metricsdc
          - name: MSSQL_CONTAINER_TYPE
            value: telegraf
          - name: MSSQL_POD_KIND
            value: DaemonSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-telegraf:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: telegraf
          ports:
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/certificates/agent
            name: metricsdc-agent-secret
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: telegraf
          - mountPath: /var/run/docker.sock
            name: docker-socket
            readOnly: true
          - mountPath: /rootfs
            name: rootro
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
            name: metricsdb-wo-secret
            readOnly: true
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: docker-socket
        - hostPath:
            path: /
            type: ""
          name: rootro
        - emptyDir:
            medium: Memory
          name: var-run
        - name: metricsdb-wo-secret
          secret:
            defaultMode: 420
            secretName: metricsdb-wo-secret
        - name: metricsdc-agent-secret
          secret:
            defaultMode: 420
            secretName: metricsdc-agent-secret
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 14
    desiredNumberScheduled: 14
    numberAvailable: 14
    numberMisscheduled: 0
    numberReady: 14
    observedGeneration: 1
    updatedNumberScheduled: 14
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    creationTimestamp: "2020-01-29T22:28:16Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
      app: app-reduce-abc-123
      plane: data
      role: application
    name: app1
    namespace: filedb
    resourceVersion: "145798434"
    selfLink: /apis/apps/v1/namespaces/filedb/replicasets/app1
    uid: a4bf924d-42e6-11ea-a8b0-0cc47ad46d50
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: app-reduce-abc-123
        plane: data
        role: application
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: app-reduce-abc-123
          plane: data
          role: application
      spec:
        containers:
        - env:
          - name: SERVICE_JSON
            value: eyJSdW50aW1lVHlwZSI6IlB5dGhvbiIsIkNvZGUiOiJvdXQgPSBoYW5kbGVyKG1zZz1tc2cpIiwiSW5pdENvZGUiOiJleGVjKG9wZW4oJy4vaGVsbG8ucHknKS5yZWFkKCkpIiwiT3duZXJzIjpbXSwiUmVhZGVycyI6W10sIklucHV0UGFyYW1ldGVyRGVmaW5pdGlvbnMiOlt7Ik5hbWUiOiJtc2ciLCJUeXBlIjoiY2hhcmFjdGVyIn1dLCJPdXRwdXRQYXJhbWV0ZXJEZWZpbml0aW9ucyI6W3siTmFtZSI6Im91dCIsIlR5cGUiOiJjaGFyYWN0ZXIifV0sIlByZWxvYWRlZEZpbGVzIjpbImhlbGxvLnB5Il19
          - name: APP_DOWNLOAD_URL
            value: https://nmnode-0-0.nmnode-0-svc:50470/webhdfs/v1/system/appdeploy/app-reduce-abc-123/app.zip?op=OPEN|
          - name: APP_SETUP_USERNAME
          - name: DedicatedShellPoolBasePath
            value: /var/opt/app
          - name: Pool__InitialSize
            value: "1"
          - name: Pool__MaxSize
            value: "1"
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: MSSQL_POD_TYPE
            value: app1
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_CONTAINER_TYPE
            value: mlserver
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          image: mcr.microsoft.com/mssql/bdc/mssql-mlserver-py-runtime:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: mlserver
          ports:
          - containerPort: 12805
            name: http
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - cat
              - /var/run/container.ready
            failureThreshold: 210
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-jwt
            name: controller-jwt-signing-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: app1-agent-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
            subPath: mlserver
          - mountPath: /var/log
            name: logs
            subPath: mlserver
          - mountPath: /var/run
            name: var-run
            subPath: mlserver
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-app.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: app1
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/opt
            name: data
            subPath: fluentbit
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/secrets/certificates/agent
            name: app1-agent-secret
            readOnly: true
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: controller-jwt-signing-secret
          secret:
            defaultMode: 420
            secretName: controller-token-secret
        - name: app1-agent-secret
          secret:
            defaultMode: 420
            secretName: app1-agent-secret
        - emptyDir:
            sizeLimit: "0"
          name: data
        - emptyDir:
            sizeLimit: "0"
          name: logs
        - emptyDir:
            medium: Memory
            sizeLimit: "0"
          name: var-run
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    creationTimestamp: "2020-01-23T17:23:46Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: appproxy
    namespace: filedb
    resourceVersion: "143353376"
    selfLink: /apis/apps/v1/namespaces/filedb/replicasets/appproxy
    uid: 1c9eaaef-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: appproxy
        plane: data
        role: proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: appproxy
          plane: data
          role: proxy
          version: aQenK-28-bOPNr4OYGOSYhD8RLrh5EeT-RdegpaBUayga
      spec:
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: appproxy
          - name: MSSQL_CONTAINER_TYPE
            value: app-service-proxy
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          image: mcr.microsoft.com/mssql/bdc/mssql-app-service-proxy:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: app-service-proxy
          ports:
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - cat
              - /var/run/container.ready
            failureThreshold: 210
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run
            name: var-run
            subPath: app-service-proxy
          - mountPath: /var/run/secrets/credentials/app-service-proxy
            name: app-service-proxy-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-jwt
            name: controller-jwt-signing-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
            subPath: app-service-proxy
          - mountPath: /var/log
            name: logs
            subPath: app-service-proxy
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/secrets/certificates/agent
            name: appproxy-agent-secret
            readOnly: true
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-app-service-proxy.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: appproxy
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/app-service-proxy
            name: app-service-proxy-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/secrets/certificates/agent
            name: appproxy-agent-secret
            readOnly: true
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: app-service-proxy-secret
          secret:
            defaultMode: 420
            secretName: appproxy-secret
        - name: controller-jwt-signing-secret
          secret:
            defaultMode: 420
            secretName: controller-token-secret
        - emptyDir: {}
          name: data
        - emptyDir:
            medium: Memory
          name: var-run
        - emptyDir: {}
          name: logs
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - name: appproxy-agent-secret
          secret:
            defaultMode: 420
            secretName: appproxy-agent-secret
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    creationTimestamp: "2020-01-23T17:18:55Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: control
    namespace: filedb
    resourceVersion: "155424922"
    selfLink: /apis/apps/v1/namespaces/filedb/replicasets/control
    uid: 6f69d404-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: controller
        plane: control
        role: controller
    template:
      metadata:
        annotations:
          microsoft.com/ignore-pod-health: "true"
        creationTimestamp: null
        labels:
          app: controller
          plane: control
          role: controller
      spec:
        containers:
        - env:
          - name: ACCEPT_EULA
            value: "yes"
          - name: CONTROLLER_ENABLE_TDS_PROXY
            value: "false"
          - name: CONTROLLER_ENABLE_HEALTH_PROPERTY_FSM
            value: "true"
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: control
          - name: MSSQL_CONTAINER_TYPE
            value: controller
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          image: mcr.microsoft.com/mssql/bdc/mssql-controller:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: controller
          ports:
          - containerPort: 443
            name: controller-port
            protocol: TCP
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/opt
            name: data
            subPath: controller
          - mountPath: /var/log
            name: logs
            subPath: controller
          - mountPath: /var/run
            name: var-run
            subPath: controller
          - mountPath: /var/run/secrets/credentials/controller-login
            name: controller-login-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/knox
            name: controller-knox-secret
            readOnly: true
          - mountPath: /var/opt/controller/config
            name: controller-config-volume
          - mountPath: /var/run/secrets/credentials/node-admin-login
            name: node-admin-login-secret
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        - env:
          - name: MSSQL_POD_TYPE
            value: control
          - name: MSSQL_CONTAINER_TYPE
            value: security-support
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8301"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8401"
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: mcr.microsoft.com/mssql/bdc/mssql-security-support:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: security-support
          ports:
          - containerPort: 8301
            name: agent-grpc-8301
            protocol: TCP
          - containerPort: 8401
            name: agent-srv-8401
            protocol: TCP
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: logs
            subPath: security-support
          - mountPath: /var/run
            name: var-run
            subPath: security-support
          - mountPath: /var/run/secrets/credentials/domain-service-account
            name: domain-service-account-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: control-agent-secret
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
            readOnly: true
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-controller.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: control
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/opt
            name: data
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: control-agent-secret
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: sa-mssql-controller
        serviceAccountName: sa-mssql-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - name: logs
          persistentVolumeClaim:
            claimName: logs-controller
        - name: data
          persistentVolumeClaim:
            claimName: data-controller
        - emptyDir:
            medium: Memory
          name: var-run
        - name: domain-service-account-secret
          secret:
            defaultMode: 420
            secretName: domain-service-account-secret
        - name: controller-login-secret
          secret:
            defaultMode: 420
            secretName: controller-login-secret
        - name: controller-knox-secret
          secret:
            defaultMode: 420
            secretName: controller-knox-secret
        - name: node-admin-login-secret
          secret:
            defaultMode: 420
            secretName: node-admin-login-secret
        - configMap:
            defaultMode: 420
            name: mssql-controller-config
          name: controller-config-volume
        - name: control-agent-secret
          secret:
            defaultMode: 420
            secretName: control-agent-secret
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    creationTimestamp: "2020-01-23T17:20:30Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: controlwd
    namespace: filedb
    resourceVersion: "136130171"
    selfLink: /apis/apps/v1/namespaces/filedb/replicasets/controlwd
    uid: a79d8673-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: controlwd
        plane: control
        role: controlwd
    template:
      metadata:
        annotations:
          microsoft.com/ignore-pod-health: "true"
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: controlwd
          plane: control
          role: controlwd
          version: aA5irtJW_WtjRowhTbfI7YHf2FINYS0oufS71YGIwQQoa
      spec:
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: controlwd
          - name: MSSQL_CONTAINER_TYPE
            value: controlwatchdog
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          image: mcr.microsoft.com/mssql/bdc/mssql-control-watchdog:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: controlwatchdog
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/opt
            name: data
            subPath: controlwatchdog
          - mountPath: /var/log
            name: logs
            subPath: controlwatchdog
          - mountPath: /var/run
            name: var-run
            subPath: controlwatchdog
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: sa-mssql-controller
        serviceAccountName: sa-mssql-controller
        terminationGracePeriodSeconds: 0
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: logs
        - emptyDir:
            medium: Memory
          name: var-run
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    creationTimestamp: "2020-01-23T17:20:34Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: logsui
    namespace: filedb
    resourceVersion: "136130295"
    selfLink: /apis/apps/v1/namespaces/filedb/replicasets/logsui
    uid: aa7e22f1-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: logsui
        plane: control
        role: monitoring
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: logsui
          plane: control
          role: monitoring
          version: aJt8YhLYT0WAFrB8AuaQSUUAtmDXCjqyDRfFVLdHCvmwa
      spec:
        containers:
        - env:
          - name: CLUSTER_NAME
            value: elasticsearch
          - name: ELASTICSEARCH_HOSTS
            value: https://logsdb-svc:9200
          - name: MSSQL_POD_TYPE
            value: logsui
          - name: MSSQL_CONTAINER_TYPE
            value: kibana
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-kibana:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: kibana
          ports:
          - containerPort: 5601
            name: kibana-5601
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run
            name: var-run
            subPath: kibana
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: logsui-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/logsdb-admin-secret
            name: logsdb-admin-secret
            readOnly: true
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - emptyDir:
            medium: Memory
          name: var-run
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: logsui-agent-secret
          secret:
            defaultMode: 420
            secretName: logsui-agent-secret
        - name: logsdb-admin-secret
          secret:
            defaultMode: 420
            secretName: logsdb-admin-secret
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    creationTimestamp: "2020-01-23T17:20:34Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: metricsui
    namespace: filedb
    resourceVersion: "143350478"
    selfLink: /apis/apps/v1/namespaces/filedb/replicasets/metricsui
    uid: aa7eea0e-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: metricsui
        plane: control
        role: monitoring
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: metricsui
          plane: control
          role: monitoring
          version: aWnNpJtL3JSE5blLtIBdOe7i6gbfMHwyJd1xwajvf1Psa
      spec:
        containers:
        - env:
          - name: MSSQL_POD_TYPE
            value: metricsui
          - name: MSSQL_CONTAINER_TYPE
            value: grafana
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-grafana:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: grafana
          ports:
          - containerPort: 3000
            name: grafana-3000
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/certificates/agent
            name: metricsui-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsui-admin-secret
            name: metricsui-admin-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-ro-secret
            name: metricsdb-ro-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
            subPath: grafana
          - mountPath: /var/log
            name: logs
            subPath: grafana
          - mountPath: /var/run
            name: var-run
            subPath: grafana
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: logs
        - emptyDir:
            medium: Memory
          name: var-run
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: metricsui-agent-secret
          secret:
            defaultMode: 420
            secretName: metricsui-agent-secret
        - name: metricsdb-ro-secret
          secret:
            defaultMode: 420
            secretName: metricsdb-ro-secret
        - name: metricsui-admin-secret
          secret:
            defaultMode: 420
            secretName: metricsui-admin-secret
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    creationTimestamp: "2020-01-23T17:20:36Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: mgmtproxy
    namespace: filedb
    resourceVersion: "143353355"
    selfLink: /apis/apps/v1/namespaces/filedb/replicasets/mgmtproxy
    uid: abb12c1a-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mgmtproxy
        plane: control
        role: proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: mgmtproxy
          plane: control
          role: proxy
          version: anVq9SEXC8ZL0TIRaO0l9Fw8CumEYSNg3RJpJrg7Nagka
      spec:
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: mgmtproxy
          - name: MSSQL_CONTAINER_TYPE
            value: service-proxy
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: SERVICE_PROXY_PORT
            value: "30777"
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          image: mcr.microsoft.com/mssql/bdc/mssql-service-proxy:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: service-proxy
          ports:
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - cat
              - /var/run/container.ready
            failureThreshold: 210
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/service-proxy
            name: service-proxy-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
            subPath: service-proxy
          - mountPath: /var/log
            name: logs
            subPath: service-proxy
          - mountPath: /var/run
            name: var-run
            subPath: service-proxy
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/secrets/certificates/agent
            name: mgmtproxy-agent-secret
            readOnly: true
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-service-proxy.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: mgmtproxy
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: ReplicaSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/opt
            name: data
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/secrets/certificates/agent
            name: mgmtproxy-agent-secret
          - mountPath: /var/run/secrets/credentials/service-proxy
            name: service-proxy-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: service-proxy-secret
          secret:
            defaultMode: 420
            secretName: mgmtproxy-secret
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: metricsui-admin-secret
          secret:
            defaultMode: 420
            secretName: metricsui-admin-secret
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: logs
        - emptyDir:
            medium: Memory
          name: var-run
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - name: mgmtproxy-agent-secret
          secret:
            defaultMode: 420
            secretName: mgmtproxy-agent-secret
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-23T17:23:44Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: compute-0
    namespace: filedb
    resourceVersion: "145798449"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/compute-0
    uid: 1b8ddaa5-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        MSSQL_CLUSTER: filedb
        app: compute-0
        plane: data
        pool-name: default
        pool-number: "0"
        role: compute-pool
    serviceName: compute-0-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: compute-0
          plane: data
          pool-name: default
          pool-number: "0"
          role: compute-pool
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - compute-0
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: compute
          - name: MSSQL_CONTAINER_TYPE
            value: mssql-server
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: ACCEPT_EULA
            value: "Y"
          - name: MSSQL_POD_KIND
            value: StatefulSet
          image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: mssql-server
          ports:
          - containerPort: 1433
            name: port-1433
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          - containerPort: 5502
            name: shuffle-5502
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - cat
              - /var/run/container.ready
            failureThreshold: 210
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-compute-pool-default-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: compute-0-agent-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
            subPath: mssql-server
          - mountPath: /var/log
            name: logs
            subPath: mssql-server
          - mountPath: /var/run
            name: var-run
            subPath: mssql-server
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/configmaps/hadoop
            name: hadoop-config-volume
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MONITORING_HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: SQL_HOSTNAME
            value: 127.0.0.1
          - name: SQL_POLL_INTERVAL
            value: "5"
          - name: MSSQL_POD_TYPE
            value: compute
          - name: MSSQL_CONTAINER_TYPE
            value: collectd
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8310"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8410"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: collectd
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8310
            name: agent-grpc-8310
            protocol: TCP
          - containerPort: 8410
            name: agent-srv-8410
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: compute-0-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
            name: metricsdb-wo-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
          - mountPath: /var/log
            name: logs
            subPath: collectd
          - mountPath: /var/run
            name: var-run
            subPath: collectd
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-compute-pool-default.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: compute
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-compute-pool-default-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: compute-0-agent-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: mssql-compute-pool-default-secret
          secret:
            defaultMode: 420
            secretName: mssql-compute-pool-default-secret
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: compute-0-agent-secret
          secret:
            defaultMode: 420
            secretName: compute-0-agent-secret
        - name: metricsdb-wo-secret
          secret:
            defaultMode: 420
            secretName: metricsdb-wo-secret
        - emptyDir:
            medium: Memory
          name: var-run
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - configMap:
            defaultMode: 420
            name: mssql-hadoop-storage-0-configmap
          name: hadoop-config-volume
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 15Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: logs
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 10Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: compute-0-674bbcdf8b
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: compute-0-674bbcdf8b
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-23T17:18:55Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: controldb
    namespace: filedb
    resourceVersion: "136129443"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/controldb
    uid: 6f61c84b-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: controldb
        plane: control
        role: controldb
    serviceName: ""
    template:
      metadata:
        annotations:
          microsoft.com/ignore-pod-health: "true"
        creationTimestamp: null
        labels:
          app: controldb
          plane: control
          role: controldb
      spec:
        containers:
        - env:
          - name: ACCEPT_EULA
            value: "Y"
          - name: MSSQL_POD_TYPE
            value: controldb
          - name: MSSQL_CONTAINER_TYPE
            value: mssql-server
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8301"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8401"
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: mcr.microsoft.com/mssql/bdc/mssql-server-controller:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: mssql-server
          ports:
          - containerPort: 1433
            name: ctrl-sql-port
            protocol: TCP
          - containerPort: 8301
            name: agent-grpc-8301
            protocol: TCP
          - containerPort: 8401
            name: agent-srv-8401
            protocol: TCP
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/opt/mssql/data
            name: data
            subPath: mssql-server
          - mountPath: /var/log
            name: logs
            subPath: mssql-server
          - mountPath: /var/opt/mssql/log
            name: logs
            subPath: mssql-server/mssql-server
          - mountPath: /var/run
            name: var-run
            subPath: mssql-server
          - mountPath: /var/run/secrets/credentials/mssql-sa-password
            name: controller-sa-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: controldb-agent-secret
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
            readOnly: true
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-controllerdb.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: controldb
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/opt
            name: data
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: controldb-agent-secret
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: logs
          persistentVolumeClaim:
            claimName: logs-controldb
        - name: data
          persistentVolumeClaim:
            claimName: data-controldb
        - emptyDir:
            medium: Memory
          name: var-run
        - name: controller-sa-secret
          secret:
            defaultMode: 420
            secretName: controller-sa-secret
        - name: controller-login-secret
          secret:
            defaultMode: 420
            secretName: controller-login-secret
        - name: controldb-agent-secret
          secret:
            defaultMode: 420
            secretName: controldb-agent-secret
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
    updateStrategy:
      type: OnDelete
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: controldb-cf6668d4
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: controldb-cf6668d4
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-23T20:12:11Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: data-0
    namespace: filedb
    resourceVersion: "145798492"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/data-0
    uid: a3e82a15-3e1c-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: Parallel
    replicas: 4
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        MSSQL_CLUSTER: filedb
        app: data-0
        plane: data
        pool-name: default
        pool-number: "0"
        role: data-pool
    serviceName: data-0-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: data-0
          plane: data
          pool-name: default
          pool-number: "0"
          role: data-pool
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - data-0
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: data
          - name: MSSQL_CONTAINER_TYPE
            value: mssql-server
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: ACCEPT_EULA
            value: "Y"
          - name: MSSQL_RPC_PORT
            value: "135"
          - name: MSSQL_DTC_TCP_PORT
            value: "51000"
          - name: MSSQL_POD_KIND
            value: StatefulSet
          image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: mssql-server
          ports:
          - containerPort: 135
            name: rpc-port-135
            protocol: TCP
          - containerPort: 1433
            name: port-1433
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          - containerPort: 51000
            name: dtc-port-51000
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - cat
              - /var/run/container.ready
            failureThreshold: 210
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-data-pool-default-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: data-0-agent-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/mssql-data-pool-default/var.cu1/mssql-server
          - mountPath: /var/opt/stripe-shared
            name: idies-data
            subPath: Aris/mssql-data-pool-default/var.cu1/stripe-shared
          - mountPath: /var/log
            name: logs
            subPath: mssql-server
          - mountPath: /var/run
            name: var-run
            subPath: mssql-server
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /pvcadmin
            name: idies-data
            subPath: Aris
          - mountPath: /sciserver
            name: autofs-sciserver
          - mountPath: /srv
            name: srv
          - mountPath: /nvme
            name: nvme
        - env:
          - name: MONITORING_HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: SQL_HOSTNAME
            value: 127.0.0.1
          - name: SQL_POLL_INTERVAL
            value: "5"
          - name: MSSQL_POD_TYPE
            value: data
          - name: MSSQL_CONTAINER_TYPE
            value: collectd
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8310"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8410"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: collectd
          ports:
          - containerPort: 8310
            name: agent-grpc-8310
            protocol: TCP
          - containerPort: 8410
            name: agent-srv-8410
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: data-0-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
            name: metricsdb-wo-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/mssql-data-pool-default/var.cu1/collectd
          - mountPath: /var/log
            name: logs
            subPath: collectd
          - mountPath: /var/run
            name: var-run
            subPath: collectd
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENT_INFLUXDB_HOST
            value: metricsdb-svc
          - name: FLUENT_INFLUXDB_PORT
            value: "8086"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-data-pool-default.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: data
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-data-pool-default-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: data-0-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
            name: metricsdb-wo-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/mssql-data-pool-default/var.cu1/fluentbit
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: mssql-data-pool-default-secret
          secret:
            defaultMode: 420
            secretName: mssql-data-pool-default-secret
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: data-0-agent-secret
          secret:
            defaultMode: 420
            secretName: data-0-agent-secret
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - name: metricsdb-wo-secret
          secret:
            defaultMode: 420
            secretName: metricsdb-wo-secret
        - emptyDir:
            medium: Memory
          name: var-run
        - hostPath:
            path: /sciserver
            type: ""
          name: autofs-sciserver
        - hostPath:
            path: /srv
            type: ""
          name: srv
        - hostPath:
            path: /nvme
            type: ""
          name: nvme
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: idies-data
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 5000Gi
        storageClassName: local-storage
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: logs
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 10Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 4
    currentRevision: data-0-848c6dffc6
    observedGeneration: 1
    readyReplicas: 4
    replicas: 4
    updateRevision: data-0-848c6dffc6
    updatedReplicas: 4
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-23T17:23:51Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: gateway
    namespace: filedb
    resourceVersion: "137301346"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/gateway
    uid: 1fea85a5-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        MSSQL_CLUSTER: filedb
        app: gateway
        plane: control
        role: gateway
    serviceName: gateway-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: gateway
          plane: control
          role: gateway
      spec:
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: gateway
          - name: MSSQL_CONTAINER_TYPE
            value: knox
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          image: mcr.microsoft.com/mssql/bdc/mssql-security-knox:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: knox
          ports:
          - containerPort: 8443
            name: knox-8443
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/gateway
            name: gateway-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
            subPath: knox
          - mountPath: /var/run
            name: var-run
            subPath: knox
          - mountPath: /var/run/secrets/certificates/agent
            name: gateway-agent-secret
            readOnly: true
          - mountPath: /var/log
            name: logs
            subPath: knox
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/configmaps/knox
            name: knox-config-volume
            readOnly: true
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-security.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: gateway
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/opt
            name: data
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/secrets/credentials/gateway
            name: gateway-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: gateway-agent-secret
            readOnly: true
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: gateway-agent-secret
          secret:
            defaultMode: 420
            secretName: gateway-agent-secret
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: gateway-secret
          secret:
            defaultMode: 420
            secretName: gateway-secret
        - emptyDir:
            medium: Memory
          name: var-run
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - configMap:
            defaultMode: 420
            name: knox-configmap
          name: knox-config-volume
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 15Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: logs
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 10Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: gateway-7bf46f6bcd
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: gateway-7bf46f6bcd
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-23T17:20:37Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: logsdb
    namespace: filedb
    resourceVersion: "158113354"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/logsdb
    uid: abb8c54d-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        MSSQL_CLUSTER: filedb
        app: logsdb
        plane: control
        role: monitoring
    serviceName: logsdb-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: logsdb
          plane: control
          role: monitoring
      spec:
        containers:
        - env:
          - name: ES_JAVA_OPTS
            value: -Xms512m -Xmx512m
          - name: MSSQL_POD_TYPE
            value: logsdb
          - name: MSSQL_CONTAINER_TYPE
            value: elasticsearch
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-elasticsearch:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: elasticsearch
          ports:
          - containerPort: 9200
            name: es-http
            protocol: TCP
          - containerPort: 9300
            name: es-transport
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/logsdb-admin-secret
            name: logsdb-admin-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: logsdb-agent-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
            subPath: elasticsearch
          - mountPath: /var/log
            name: logs
            subPath: elasticsearch
          - mountPath: /var/run
            name: var-run
            subPath: elasticsearch
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        initContainers:
        - command:
          - sysctl
          - -w
          - vm.max_map_count=262144
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-elasticsearch:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: init-sysctl
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: logsdb-agent-secret
          secret:
            defaultMode: 420
            secretName: logsdb-agent-secret
        - name: logsdb-admin-secret
          secret:
            defaultMode: 420
            secretName: logsdb-admin-secret
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - emptyDir:
            medium: Memory
          name: var-run
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 15Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: logs
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 10Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: logsdb-595f9c8dc7
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: logsdb-595f9c8dc7
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-27T22:54:52Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: master
    namespace: filedb
    resourceVersion: "137362809"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/master
    uid: 07983705-4158-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        MSSQL_CLUSTER: filedb
        app: master
        mssql.microsoft.com/sql-instance: master
        plane: data
        role: master-pool
        type: sqlservr
    serviceName: master-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: master
          mssql.microsoft.com/sql-instance: master
          plane: data
          role: master-pool
          type: sqlservr
      spec:
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: master
          - name: MSSQL_CONTAINER_TYPE
            value: mssql-server
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8301"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8401"
          - name: ACCEPT_EULA
            value: "Y"
          - name: ACCEPT_EULA_ML
            value: "Y"
          - name: MSSQL_RPC_PORT
            value: "135"
          - name: MSSQL_DTC_TCP_PORT
            value: "51000"
          - name: MSSQL_POD_KIND
            value: StatefulSet
          image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: mssql-server
          ports:
          - containerPort: 135
            name: rpc-port-135
            protocol: TCP
          - containerPort: 1433
            name: port-1433
            protocol: TCP
          - containerPort: 8301
            name: agent-grpc-8301
            protocol: TCP
          - containerPort: 8401
            name: agent-srv-8401
            protocol: TCP
          - containerPort: 51000
            name: dtc-port-51000
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - cat
              - /var/run/container.ready
            failureThreshold: 210
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-master-pool-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/node-admin-login
            name: node-admin-login-secrets
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: master-agent-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/master-0/cu1/mssql-server
          - mountPath: /var/opt/mssql/data2
            name: idies-data2
            subPath: Aris/master-0/cu1/mssql-server/data2
          - mountPath: /var/opt/mssql/data3
            name: idies-data3
            subPath: Aris/master-0/cu1/mssql-server/data3
          - mountPath: /var/opt/mssql/data4
            name: idies-data4
            subPath: Aris/master-0/cu1/mssql-server/data4
          - mountPath: /var/opt/mssql/data5
            name: idies-data5
            subPath: Aris/master-0/cu1/mssql-server/data5
          - mountPath: /var/opt/mssql/data6
            name: idies-data6
            subPath: Aris/master-0/cu1/mssql-server/data6
          - mountPath: /var/opt/mssql/data7
            name: idies-data7
            subPath: Aris/master-0/cu1/mssql-server/data7
          - mountPath: /var/opt/mssql/data8
            name: idies-data8
            subPath: Aris/master-0/cu1/mssql-server/data8
          - mountPath: /var/log
            name: logs
            subPath: mssql-server
          - mountPath: /var/run
            name: var-run
            subPath: mssql-server
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/configmaps/hadoop
            name: hadoop-config-volume
        - env:
          - name: MONITORING_HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MSSQL_POD_TYPE
            value: master
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8310"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8410"
          - name: SQL_HOSTNAME
            value: 127.0.0.1
          - name: SQL_POLL_INTERVAL
            value: "5"
          - name: MSSQL_POD_TYPE
            value: master
          - name: MSSQL_CONTAINER_TYPE
            value: collectd
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: collectd
          ports:
          - containerPort: 8310
            name: agent-grpc-8310
            protocol: TCP
          - containerPort: 8410
            name: agent-srv-8410
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: master-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
            name: metricsdb-wo-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/master-0/cu1/collectd
          - mountPath: /var/log
            name: logs
            subPath: collectd
          - mountPath: /var/run
            name: var-run
            subPath: collectd
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-master-pool.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: master
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-master-pool-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: master-agent-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/master-0/cu1/fluentbit
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: mssql-master-pool-secret
          secret:
            defaultMode: 420
            secretName: mssql-master-pool-secret
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: node-admin-login-secrets
          secret:
            defaultMode: 420
            secretName: node-admin-login-secret
        - name: master-agent-secret
          secret:
            defaultMode: 420
            secretName: master-agent-secret
        - name: metricsdb-wo-secret
          secret:
            defaultMode: 420
            secretName: metricsdb-wo-secret
        - emptyDir:
            medium: Memory
          name: var-run
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - configMap:
            defaultMode: 420
            name: mssql-hadoop-storage-0-configmap
          name: hadoop-config-volume
        - hostPath:
            path: /sciserver
            type: ""
          name: autofs-sciserver
        - hostPath:
            path: /srv
            type: ""
          name: srv
        - hostPath:
            path: /nvme
            type: ""
          name: nvme
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: idies-data
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 800Gi
        storageClassName: local-storage-nvme
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: idies-data2
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 800Gi
        storageClassName: local-storage-nvme
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: idies-data3
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 800Gi
        storageClassName: local-storage-nvme
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: idies-data4
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 800Gi
        storageClassName: local-storage-nvme
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: idies-data5
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 800Gi
        storageClassName: local-storage-nvme
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: idies-data6
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 800Gi
        storageClassName: local-storage-nvme
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: idies-data7
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 800Gi
        storageClassName: local-storage-nvme
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: idies-data8
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 800Gi
        storageClassName: local-storage-nvme
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: logs
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 10Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: master-8544fcfcdd
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: master-8544fcfcdd
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-23T17:20:35Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: metricsdb
    namespace: filedb
    resourceVersion: "136130250"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/metricsdb
    uid: aa8e4a04-3e04-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        MSSQL_CLUSTER: filedb
        app: metricsdb
        plane: control
        role: monitoring
    serviceName: metricsdb-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: metricsdb
          plane: control
          role: monitoring
      spec:
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: metricsdb
          - name: MSSQL_CONTAINER_TYPE
            value: influxdb
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-influxdb:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: influxdb
          ports:
          - containerPort: 8086
            name: influxdb-8086
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: metricsdb-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
            name: metricsdb-wo-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
            subPath: influxdb
          - mountPath: /var/log
            name: logs
            subPath: influxdb
          - mountPath: /var/run
            name: var-run
            subPath: influxdb
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: metricsdb-agent-secret
          secret:
            defaultMode: 420
            secretName: metricsdb-agent-secret
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - name: metricsdb-wo-secret
          secret:
            defaultMode: 420
            secretName: metricsdb-wo-secret
        - emptyDir:
            medium: Memory
          name: var-run
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 15Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: logs
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 10Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: metricsdb-585dcdb8cc
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: metricsdb-585dcdb8cc
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-23T22:31:42Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: nmnode-0
    namespace: filedb
    resourceVersion: "136195454"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/nmnode-0
    uid: 2139e206-3e30-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        MSSQL_CLUSTER: filedb
        app: nmnode-0
        plane: data
        pool-name: default
        pool-number: "0"
        role: namenode
    serviceName: nmnode-0-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: nmnode-0
          plane: data
          pool-name: default
          pool-number: "0"
          role: namenode
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - nmnode-0
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: nmnode
          - name: MSSQL_CONTAINER_TYPE
            value: hadoop
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: MSSQL_POD_KIND
            value: StatefulSet
          image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: hadoop
          ports:
          - containerPort: 9000
            name: default-fs
            protocol: TCP
          - containerPort: 50470
            name: name-node-https
            protocol: TCP
          - containerPort: 14000
            name: http-fs
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          - containerPort: 50200
            name: tiering-port
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-master-pool-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/nmnode-0/var.cu1/opt
          - mountPath: /var/opt/hdfs/namenode
            name: idies-data
            subPath: Aris/nmnode-0/hdfs/namenode
          - mountPath: /var/log
            name: logs
            subPath: hadoop
          - mountPath: /var/run
            name: var-run
            subPath: hadoop
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/configmaps/hadoop
            name: hadoop-config-volume
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: nmnode-0-agent-secret
            readOnly: true
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-namenode.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: nmnode
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/nmnode-0/cu1/fluentbit
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/secrets/certificates/agent
            name: nmnode-0-agent-secret
            readOnly: true
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirstWithHostNet
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mssql-master-pool-secret
          secret:
            defaultMode: 420
            secretName: mssql-master-pool-secret
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - emptyDir:
            medium: Memory
          name: var-run
        - configMap:
            defaultMode: 420
            name: mssql-hadoop-storage-0-configmap
          name: hadoop-config-volume
        - name: nmnode-0-agent-secret
          secret:
            defaultMode: 420
            secretName: nmnode-0-agent-secret
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: idies-data
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 800Gi
        storageClassName: local-storage-nvme
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: logs
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 10Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: nmnode-0-86686dd6d6
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: nmnode-0-86686dd6d6
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-23T17:24:22Z"
    generation: 1
    labels:
      MSSQL_CLUSTER: filedb
    name: sparkhead
    namespace: filedb
    resourceVersion: "137283776"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/sparkhead
    uid: 32411a98-3e05-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        MSSQL_CLUSTER: filedb
        app: sparkhead
        plane: data
        role: sparkhead-pool
    serviceName: sparkhead-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: sparkhead
          plane: data
          role: sparkhead-pool
      spec:
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: sparkhead
          - name: MSSQL_CONTAINER_TYPE
            value: hadoop-yarn-jobhistory
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: hadoop-yarn-jobhistory
          ports:
          - containerPort: 8088
            name: yarn-ui-8088
            protocol: TCP
          - containerPort: 8030
            name: yarn-8030
            protocol: TCP
          - containerPort: 8031
            name: yarn-8031
            protocol: TCP
          - containerPort: 8032
            name: yarn-8032
            protocol: TCP
          - containerPort: 8033
            name: yarn-8033
            protocol: TCP
          - containerPort: 19888
            name: job-19888
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-master-pool-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/configmaps/hadoop
            name: hadoop-config-volume
            readOnly: true
          - mountPath: /var/log
            name: logs
            subPath: hadoop-yarn-jobhistory
          - mountPath: /var/run
            name: var-run
            subPath: hadoop-yarn-jobhistory
          - mountPath: /var/run/secrets/certificates/agent
            name: sparkhead-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
            name: metricsdb-wo-secret
            readOnly: true
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: sparkhead
          - name: MSSQL_CONTAINER_TYPE
            value: hadoop-livy-sparkhistory
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8301"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8401"
          - name: MSSQL_POD_KIND
            value: StatefulSet
          image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: hadoop-livy-sparkhistory
          ports:
          - containerPort: 18080
            name: sparkhist-18080
            protocol: TCP
          - containerPort: 8998
            name: livy-8998
            protocol: TCP
          - containerPort: 8301
            name: agent-grpc-8301
            protocol: TCP
          - containerPort: 8401
            name: agent-srv-8401
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-master-pool-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/configmaps/hadoop
            name: hadoop-config-volume
            readOnly: true
          - mountPath: /var/log
            name: logs
            subPath: hadoop-livy-sparkhistory
          - mountPath: /var/run
            name: var-run
            subPath: hadoop-livy-sparkhistory
          - mountPath: /var/run/secrets/certificates/agent
            name: sparkhead-agent-secret
            readOnly: true
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: sparkhead
          - name: MSSQL_CONTAINER_TYPE
            value: hadoop-hivemetastore
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8302"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8402"
          - name: MSSQL_POD_KIND
            value: StatefulSet
          image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: hadoop-hivemetastore
          ports:
          - containerPort: 9084
            name: hive-9084
            protocol: TCP
          - containerPort: 8302
            name: agent-grpc-8302
            protocol: TCP
          - containerPort: 8402
            name: agent-srv-8402
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-master-pool-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/configmaps/hadoop
            name: hadoop-config-volume
            readOnly: true
          - mountPath: /var/log
            name: logs
            subPath: hadoop-hivemetastore
          - mountPath: /var/run
            name: var-run
            subPath: hadoop-hivemetastore
          - mountPath: /var/run/secrets/certificates/agent
            name: sparkhead-agent-secret
            readOnly: true
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-sparkhead-pool.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: sparkhead
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-master-pool-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: sparkhead-agent-secret
            readOnly: true
          - mountPath: /var/opt
            name: data
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: mssql-master-pool-secret
          secret:
            defaultMode: 420
            secretName: mssql-master-pool-secret
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: node-admin-login-secrets
          secret:
            defaultMode: 420
            secretName: node-admin-login-secret
        - name: sparkhead-agent-secret
          secret:
            defaultMode: 420
            secretName: sparkhead-agent-secret
        - name: metricsdb-wo-secret
          secret:
            defaultMode: 420
            secretName: metricsdb-wo-secret
        - emptyDir:
            medium: Memory
          name: var-run
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - configMap:
            defaultMode: 420
            name: mssql-hadoop-sparkhead-configmap
          name: hadoop-config-volume
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 15Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: logs
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 10Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: sparkhead-77b8c4fd55
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: sparkhead-77b8c4fd55
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2020-01-23T22:32:40Z"
    generation: 2
    labels:
      MSSQL_CLUSTER: filedb
    name: storage-0
    namespace: filedb
    resourceVersion: "146092297"
    selfLink: /apis/apps/v1/namespaces/filedb/statefulsets/storage-0
    uid: 43fff39d-3e30-11ea-a8b0-0cc47ad46d50
  spec:
    podManagementPolicy: Parallel
    replicas: 4
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        MSSQL_CLUSTER: filedb
        app: storage-0
        plane: data
        pool-name: default
        pool-number: "0"
        role: storage-pool
    serviceName: storage-0-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          MSSQL_CLUSTER: filedb
          app: storage-0
          plane: data
          pool-name: default
          pool-number: "0"
          role: storage-pool
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - storage-0
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: storage
          - name: MSSQL_CONTAINER_TYPE
            value: hadoop
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8300"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8400"
          - name: INCLUDE_SPARK
            value: "true"
          image: mcr.microsoft.com/mssql/bdc/mssql-hadoop:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: hadoop
          ports:
          - containerPort: 50470
            name: port-50470
            protocol: TCP
          - containerPort: 50075
            name: port-50075
            protocol: TCP
          - containerPort: 50475
            name: port-50475
            protocol: TCP
          - containerPort: 50020
            name: port-50020
            protocol: TCP
          - containerPort: 50200
            name: tiering-port
            protocol: TCP
          - containerPort: 9000
            name: port-9000
            protocol: TCP
          - containerPort: 50010
            name: port-50010
            protocol: TCP
          - containerPort: 8300
            name: agent-grpc-8300
            protocol: TCP
          - containerPort: 8304
            name: nm-8304
            protocol: TCP
          - containerPort: 8400
            name: agent-srv-8400
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-storage-pool-default-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: storage-0-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
            name: metricsdb-wo-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/mssql-storage-pool-default/cu1/hadoop
          - mountPath: /var/opt/hdfs/datanode
            name: idies-data
            subPath: Aris/mssql-storage-pool-default/hdfs/datanode
          - mountPath: /var/log
            name: logs
            subPath: hadoop
          - mountPath: /var/run
            name: var-run
            subPath: hadoop
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/configmaps/hadoop
            name: hadoop-config-volume
          - mountPath: /pvcadmin
            name: idies-data
            subPath: Aris
          - mountPath: /sciserver
            mountPropagation: HostToContainer
            name: autofs-sciserver
          - mountPath: /srv
            name: srv
          - mountPath: /nvme
            name: nvme
        - env:
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MSSQL_POD_TYPE
            value: storage
          - name: MSSQL_CONTAINER_TYPE
            value: mssql-server
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8301"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8401"
          - name: ACCEPT_EULA
            value: "Y"
          - name: MSSQL_POD_KIND
            value: StatefulSet
          image: mcr.microsoft.com/mssql/bdc/mssql-server-data:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: mssql-server
          ports:
          - containerPort: 1433
            name: port-1433
            protocol: TCP
          - containerPort: 8301
            name: agent-grpc-8301
            protocol: TCP
          - containerPort: 8401
            name: agent-srv-8401
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - cat
              - /var/run/container.ready
            failureThreshold: 210
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-storage-pool-default-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: storage-0-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/mssql-storage-pool-default/cu1/mssql-server
          - mountPath: /var/log
            name: logs
            subPath: mssql-server
          - mountPath: /var/run
            name: var-run
            subPath: mssql-server
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
          - mountPath: /var/run/configmaps/hadoop
            name: hadoop-config-volume
          - mountPath: /pvcadmin
            name: idies-data
            subPath: Aris
          - mountPath: /sciserver
            mountPropagation: HostToContainer
            name: autofs-sciserver
          - mountPath: /srv
            name: srv
          - mountPath: /nvme
            name: nvme
        - env:
          - name: MONITORING_HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: SQL_HOSTNAME
            value: 127.0.0.1
          - name: SQL_POLL_INTERVAL
            value: "5"
          - name: MSSQL_POD_TYPE
            value: storage
          - name: MSSQL_CONTAINER_TYPE
            value: collectd
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8310"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8410"
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-collectd:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: collectd
          ports:
          - containerPort: 8310
            name: agent-grpc-8310
            protocol: TCP
          - containerPort: 8410
            name: agent-srv-8410
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: storage-0-agent-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/metricsdb-wo-secret
            name: metricsdb-wo-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/mssql-storage-pool-default/cu1/collectd
          - mountPath: /var/log
            name: logs
            subPath: collectd
          - mountPath: /var/run
            name: var-run
            subPath: collectd
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        - env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: logsdb-svc
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENTBIT_CONFIG
            value: fluentbit-storage-pool-default.conf
          - name: MSSQL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: KUBERNETES_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MSSQL_POD_TYPE
            value: storage
          - name: MSSQL_CONTAINER_TYPE
            value: fluentbit
          - name: MSSQL_POD_KIND
            value: StatefulSet
          - name: MSSQL_AGENT_GRPC_PORT
            value: "8311"
          - name: MSSQL_AGENT_HTTPS_PORT
            value: "8411"
          image: mcr.microsoft.com/mssql/bdc/mssql-monitor-fluentbit:2019-CU1-ubuntu-16.04
          imagePullPolicy: Always
          name: fluentbit
          ports:
          - containerPort: 2020
            name: fluentb-2020
            protocol: TCP
          - containerPort: 8311
            name: agent-grpc-8311
            protocol: TCP
          - containerPort: 8411
            name: agent-srv-8411
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/credentials/pool
            name: mssql-storage-pool-default-secret
            readOnly: true
          - mountPath: /var/run/secrets/credentials/controller-internal
            name: controller-internal-secret
            readOnly: true
          - mountPath: /var/run/secrets/certificates/agent
            name: storage-0-agent-secret
            readOnly: true
          - mountPath: /var/opt
            name: idies-data
            subPath: Aris/mssql-storage-pool-default/cu1/fluentbit
          - mountPath: /var/log
            name: logs
            subPath: fluentbit
          - mountPath: /mnt/logs
            name: logs
            readOnly: true
          - mountPath: /var/run
            name: var-run
            subPath: fluentbit
          - mountPath: /var/run/configmaps/cluster
            name: cluster-config-volume
        dnsConfig:
          options:
          - name: timeout
            value: "30"
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: mssql-private-registry
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 0
        volumes:
        - name: mssql-storage-pool-default-secret
          secret:
            defaultMode: 420
            secretName: mssql-storage-pool-default-secret
        - name: controller-internal-secret
          secret:
            defaultMode: 420
            secretName: controller-internal-secret
        - name: storage-0-agent-secret
          secret:
            defaultMode: 420
            secretName: storage-0-agent-secret
        - name: metricsdb-wo-secret
          secret:
            defaultMode: 420
            secretName: metricsdb-wo-secret
        - emptyDir:
            medium: Memory
          name: var-run
        - configMap:
            defaultMode: 420
            name: cluster-configmap
          name: cluster-config-volume
        - configMap:
            defaultMode: 420
            name: mssql-hadoop-storage-0-configmap
          name: hadoop-config-volume
        - hostPath:
            path: /sciserver
            type: ""
          name: autofs-sciserver
        - hostPath:
            path: /srv
            type: ""
          name: srv
        - hostPath:
            path: /nvme
            type: ""
          name: nvme
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: idies-data
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 5000Gi
        storageClassName: local-storage
        volumeMode: Filesystem
      status:
        phase: Pending
    - metadata:
        creationTimestamp: null
        name: logs
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 10Gi
        storageClassName: managed-premium
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 4
    currentRevision: storage-0-685788fb44
    observedGeneration: 2
    readyReplicas: 4
    replicas: 4
    updateRevision: storage-0-685788fb44
    updatedReplicas: 4
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
